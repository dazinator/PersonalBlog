<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnetnukednnpackager on Darrell Tunnell&#39;s Blog</title>
    <link>http://darrelltunnell.net/categories/dotnetnukednnpackager/index.xml</link>
    <description>Recent content in Dotnetnukednnpackager on Darrell Tunnell&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://darrelltunnell.net/categories/dotnetnukednnpackager/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dnn Extensions - Sources Packages?</title>
      <link>http://darrelltunnell.net/blog/1/01/01/dnn-extensions---sources-packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/1/01/01/dnn-extensions---sources-packages/</guid>
      <description>

&lt;h2 id=&#34;sources-packages&#34;&gt;Sources Packages&lt;/h2&gt;

&lt;p&gt;I have been doing some work on DnnPackager recently, and I&amp;rsquo;ve come accross the concept of &amp;ldquo;Source&amp;rdquo; packages. I have to admit I am not entirely new to these, but I&amp;rsquo;ve never personally used them for my projects in the past.&lt;/p&gt;

&lt;p&gt;Source packages are basically identical to the ordinary install zip&amp;rsquo;s for your dnn module / extension, i.e you &amp;ldquo;install&amp;rdquo; them into your Dnn site like any other install package, except that they also include &amp;ldquo;source code&amp;rdquo; files within them, like .cs, .vb files etc.&lt;/p&gt;

&lt;h2 id=&#34;why-would-you-want-to-include-source-code-in-your-install-zip&#34;&gt;Why would you want to include source code in your install zip?&lt;/h2&gt;

&lt;p&gt;Well this is where things get a little interesting.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The two main reasons I can fathom why you would want to include source code in an install zip are that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your module uses dynamic compilation, and so unless you include source files with the module installation, then it just won&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;You want to distribute your source code, so that developer&amp;rsquo;s (who pay for it?) can open it up in VS and own it / make changes (improvements?). Usually you&amp;rsquo;d charge for this option, but it&amp;rsquo;s faesible you are just an extremely generous developer (like me) who gives stuff away for free.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Number 1 is a necessity really to cater for modules that use dynamic compilation.&lt;/p&gt;

&lt;p&gt;Number 2 is an optional thing about you as a developer (or commercial entity), distributing your solution source code in a format that thrid parties can &amp;ldquo;own&amp;rdquo; it - irrespective of whether you have used dynamic compilation or not.&lt;/p&gt;

&lt;p&gt;Note: If you are using Dynamic compilation for your module, then people allready have the ability to make changes to the code by simply going into the website directory after the module has been installed, and modifying the code files. But you already knew that right!! Whether they are legally entitled to do so ofcourse, would be down to the licence agreement.&lt;/p&gt;

&lt;p&gt;Number 1 and 2 are different.&lt;/p&gt;

&lt;h2 id=&#34;why-are-they-different&#34;&gt;Why are they different?&lt;/h2&gt;

&lt;p&gt;Because in the first scenario, you are giving IIS the files it needs to compile and run your code within a Dnn website instance. In the second scenario, you are giving &lt;strong&gt;developers&lt;/strong&gt; the files they need, to open up your project / solution and &lt;strong&gt;build&lt;/strong&gt;, and compile your code, in a manner that spits out everything needed by scenario 1. In other words, the build and compilation that developers do, produces the output that&amp;rsquo;s needed within the website for the compilation that IIS does.&lt;/p&gt;

&lt;h2 id=&#34;why-was-that-last-bit-important&#34;&gt;Why was that last bit important&lt;/h2&gt;

&lt;p&gt;Because files related to the build that developers do - i,e the ones that prodice the output that actually needs to be installed to the dnn site, arguable have no business being installed into a Dnn website. Key files, project files, solution files etc etc - there are all completely unrelated to the working / running of your module within Dnn, and have nothing to do with IIS dynamic compilation or anything. They shouldn&amp;rsquo;t be installed in a website period (imho).&lt;/p&gt;

&lt;h2 id=&#34;dual-purpose&#34;&gt;Dual purpose&lt;/h2&gt;

&lt;p&gt;There seems to be a dual purpose for the sources package that doesn&amp;rsquo;t sit right with me.
Using it to install source code into the website to support dynamic compilation seems like what it is meant for imho - it is a Dnn installation zip after all.&lt;/p&gt;

&lt;p&gt;Using it to provide a third party with your VS solution / project files so that they can open up the solution in an IDE, build and compile the code is a completely different scenario, and I can&amp;rsquo;t see how that second scenario can work reliably just by including a .csproj in a dnn sources install zip - except for in the most simplisitic and basic of scenarios, which rarely happen in the real world.&lt;/p&gt;

&lt;h2 id=&#34;example-of-some-issues-with-including-sln-csproj-in-a-sources-zip-package&#34;&gt;Example of some issues with including Sln / Csproj in a sources zip package.&lt;/h2&gt;

&lt;p&gt;Currently, if you use widely available project templates to produce &amp;ldquo;sources&amp;rdquo; packages, they will by default, produce a sources &amp;ldquo;zip&amp;rdquo; file for each of the module projects in your solution, and this will contain source code files copied form your project, as well as the csproj, and sln file. (I think the sln will only get included if it lives within the project directory).&lt;/p&gt;

&lt;p&gt;Already we hit an issue, as if you have multiple projects in your solution, and the sln file lives in a parent directory of those projects like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
solution/mysln.sln
solution/projectA/projectA.csproj
solution/projectB/projectB.csproj

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(which is fairly normal) then the sln file usually won&amp;rsquo;t be included in the sources packages for any of your particular modules as it doesn&amp;rsquo;t live directly within a project directory.&lt;/p&gt;

&lt;p&gt;Secondly, if ProjectA has a project reference to ProjectB, and someone downloads the sources package for your projectA module, and opens up the csproj file that you have included in that sources package - the project is going to have a missing project reference to projectB so it won&amp;rsquo;t compile.&lt;/p&gt;

&lt;p&gt;There are yet more problems. If your .csproj files reference assemblies from some lib directory within your checkout directory somewhere, as this lib directory won&amp;rsquo;t be included in the sources package (because it doesn&amp;rsquo;t live within the project dir), anyone opening the project file in VS will see missing assembly references, they will have to manually correct them - otherwise the solution won&amp;rsquo;t compile.&lt;/p&gt;

&lt;p&gt;If your project files include some custom build targets that live on your machine, or within your checkout directory somewhere, etc etc - you guessed it the person opening the .csproj file is going to have issues because they won&amp;rsquo;t be included in the same location within the sources package.&lt;/p&gt;

&lt;h2 id=&#34;alternatives&#34;&gt;Alternatives?&lt;/h2&gt;

&lt;p&gt;If you want to give away your VS solution (or sell the source) to a third party, there are better / easier ways to provide access to it without shoehorning it in to the dnn install zip imho!&lt;/p&gt;

&lt;p&gt;The easiest may be to just zip up your entire solution (checkout directory), and allow that to be downloaded from some protected location. This does not have to be in a &amp;ldquo;dnn&amp;rdquo; install package format, just a simple zip file that the person recieving can extract and then open up the VS sln file. You want it to be like they just checked out the solution from source control and are now opening up the VS sln file - just like you do right?&lt;/p&gt;

&lt;p&gt;If there are some pre-requisites to being able to open and build the solution, add a readme to the zip that explains what a developer must do before attempting to open the solution. This is usually handy to have in your source control anyway - in case you ever need to checkout and open the solution on a new machine one day that doesn&amp;rsquo;t have your dependencies set up. These should be the same steps that any developer new to the company has to go through (including you) when checking out the code for the first time and wanting to open it.&lt;/p&gt;

&lt;h2 id=&#34;how-does-this-all-tie-in-with-dnnpackager&#34;&gt;How does this all tie in with DnnPackager?&lt;/h2&gt;

&lt;p&gt;Well, for the next realease of DnnPacakger, I have added rudimentary support for Sources packages (thanks to &lt;a href=&#34;https://github.com/nvisionative&#34;&gt;@nvisionative&lt;/a&gt; for requesting this feature) - so that it will now produce &amp;ldquo;sources&amp;rdquo; packages alongside the standard install zip. However this is currently for the purposes of supporting modules that need to include source files in their installation process into Dnn, which I suspect will mainly just be ones that use dynamic compilation.&lt;/p&gt;

&lt;p&gt;It won&amp;rsquo;t include .csproj files or .sln files because at this point in time, I can&amp;rsquo;t see how including them would lead to a reliable experience for the developer opening these up at the other end.&lt;/p&gt;

&lt;p&gt;Disagree? Leave some comments below, I&amp;rsquo;d love to be convinced - or to just hear your views!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DnnPackager - v2.0.6</title>
      <link>http://darrelltunnell.net/blog/1/01/01/dnnpackager---v2.0.6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/1/01/01/dnnpackager---v2.0.6/</guid>
      <description>

&lt;h2 id=&#34;dnnpackager-release-v2-0-6&#34;&gt;DnnPackager Release -v2.0.6&lt;/h2&gt;

&lt;p&gt;A short post to announce that a new minor release of DnnPackager is out. You can find the release notes here explaining what&amp;rsquo;s new: &lt;a href=&#34;https://github.com/dazinator/DnnPackager/releases/tag/2.0.6%2B2&#34;&gt;https://github.com/dazinator/DnnPackager/releases/tag/2.0.6%2B2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For an introduction to DnnPackager in general &lt;a href=&#34;http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started/&#34;&gt;see here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/nvisionative&#34;&gt;@nvisionative&lt;/a&gt; for requesting this feature.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DotNetNuke - Streamlining Module Development Workflow</title>
      <link>http://darrelltunnell.net/blog/1/01/01/dotnetnuke---streamlining-module-development-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/1/01/01/dotnetnuke---streamlining-module-development-workflow/</guid>
      <description>

&lt;h2 id=&#34;module-debugging-two-approaches&#34;&gt;Module Debugging - Two Approaches&lt;/h2&gt;

&lt;p&gt;When developing DotNetNuke modules people take many different approaches but they boil down to two alternatives in terms of workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Placing / checking out your source code directly into the \DesktopModules folder of a DotNetNuke website, and having your module dll&amp;rsquo;s output to directly into the DotNetNuke website&amp;rsquo;s \bin folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Checking out and working on your code wherever you like, but having to deploy your module (content and assemblies) to a local DNN website when you are ready to run it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both approaches require that you &amp;ldquo;attach to process&amp;rdquo; from within Visual Studio in order to debug your module.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;i-hate-approach-1&#34;&gt;I hate approach #1&lt;/h3&gt;

&lt;p&gt;I have all sorts of issues with approach #1. Yes it’s technically possible, but it’s also nasty in my view (not very clean) - I have elaborated on that elsewhere so won’t do so again here in depth, aside to say that I believe #2 is the &amp;ldquo;cleanest&amp;rdquo; approach and that many forms of debugging use #2 as the approach, not #1. For example, xamarin devs, when they debug an android app, you will see that xamarin actually deploys their project to the device / emulator, and then attaches the debugger to the remote process that&amp;rsquo;s running on the device / emulator. The result is that they click &amp;ldquo;Play&amp;rdquo; in VS, and a shortwhile later they are attached and stepping through their code.. It may not be obvious that a deployment took place - but it did. Lastly. i&amp;rsquo;ll point out that #1 creates a coupling between how you structure your source code, and where it needs to be when it&amp;rsquo;s actually deployed.&lt;/p&gt;

&lt;h3 id=&#34;but-approach-2-is-lacking&#34;&gt;But approach #2 is lacking&lt;/h3&gt;

&lt;p&gt;So deciding to take approach #2, having to manually copy / deploy your module content  to the DotNetNuke website each time you want to test your module, is just not an efficient use of your time!&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s needed is some nice visual studio integration so that when you are ready to &amp;ldquo;Run / Debug&amp;rdquo; your module, you click one button and bam! chrome opens up, displaying your module, with the debugger attached so you can step through code.&lt;/p&gt;

&lt;h3 id=&#34;can-anything-be-done&#34;&gt;Can anything be done?&lt;/h3&gt;

&lt;p&gt;I have allready made strides to address the inefficiences of #2 so that it&amp;rsquo;s now a lot more streamlined: &lt;a href=&#34;https://github.com/dazinator/DnnPackager&#34;&gt;https://github.com/dazinator/DnnPackager&lt;/a&gt; - it&amp;rsquo;s a NuGet package that you add to any VS project, and it will produce the Dnn module installation zip for you when you build the project. It then also extends the package manager console window in VS with an additional command you can run, that will deploy the module project to a local DNN website. So this is the workflow I currently use for module debugging:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a change to the code&lt;/li&gt;
&lt;li&gt;Hit “up” arrow and then hit “enter” in package manager console (this runs the previous command which is the DnnPackager one I spoke of, that builds and deploys my module project to my local dnn website)&lt;/li&gt;
&lt;li&gt;Refresh my browser page, and attach Visual Studio (ctrl + alt + p) to the w3w process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a bit more streamlined! This makes approach #2 workable in my opinion.&lt;/p&gt;

&lt;h3 id=&#34;room-for-improvements&#34;&gt;Room for Improvements!&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;What if I don’t have a DNN website already installed - for example I am new to Dnn development and just want to get up and running as quickly as possible.&lt;/li&gt;
&lt;li&gt;What if I am curious to know if my module runs in DNN 6.5.1 and I only have DNN7 installed?&lt;/li&gt;
&lt;li&gt;What if this is the first time I am testing this particular module - I have to make sure I go to DotNetNuke website, Create a page and add my module to that page right?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These things are all tedious. Most developers (new to DNN) expect to be able to click Debug and immediately be debugging their code - they don’t expect to have to jump through these additional hurdles / barriers.&lt;/p&gt;

&lt;p&gt;This is why DotNetNuke development can be a bit of a culture shock for many developers.&lt;/p&gt;

&lt;h3 id=&#34;next-feature&#34;&gt;Next Feature!&lt;/h3&gt;

&lt;p&gt;So the next feature I am thinking of adding to DnnPackager is one that addresses those concerns mentioned above. I’d be really greatful if anyone with such a curiousity wouldn&amp;rsquo;t mind reading it and offering their feedback on this proposed awesome feature &lt;a href=&#34;https://github.com/dazinator/DnnPackager/issues/14&#34;&gt;https://github.com/dazinator/DnnPackager/issues/14&lt;/a&gt; - just so I can get a feel for whether there is much demand for such a capability.&lt;/p&gt;

&lt;h3 id=&#34;feedback&#34;&gt;Feedback?&lt;/h3&gt;

&lt;p&gt;Do you disagree?
Would this new feature &lt;a href=&#34;https://github.com/dazinator/DnnPackager/issues/14&#34;&gt;https://github.com/dazinator/DnnPackager/issues/14&lt;/a&gt; help you?&lt;/p&gt;

&lt;p&gt;Darrell Tunnell
&lt;a href=&#34;http://darrelltunnell.net&#34;&gt;http://darrelltunnell.net&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>