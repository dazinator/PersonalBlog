<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamics Crm on Darrell Tunnell</title>
    <link>http://darrelltunnell.net/tags/dynamics-crm/index.xml</link>
    <description>Recent content in Dynamics Crm on Darrell Tunnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://darrelltunnell.net/tags/dynamics-crm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How far does the XRM SDK&#39;s ExecuteMultipleRequest get you?</title>
      <link>http://darrelltunnell.net/blog/2015/02/26/how-far-does-the-xrm-sdk-s-executemultiplerequest-get-you/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2015/02/26/how-far-does-the-xrm-sdk-s-executemultiplerequest-get-you/</guid>
      <description>&lt;h3 id=&#34;executemultiplerequest-let-s-take-it-to-the-max&#34;&gt;ExecuteMultipleRequest - Let&amp;rsquo;s take it to the max&lt;/h3&gt;

&lt;p&gt;In this post, I will explore what kinds of things can be achieved using the SDK&amp;rsquo;s ExecuteMultipleRequest, by starting of with a simple SQL command, and implementing a semantically equivalent ExecuteMultipleRequest, and then slowly introducing some additional complexity - so that, we can see some areas where the SDK starts to fall short!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;starting-simple&#34;&gt;Starting Simple&lt;/h3&gt;

&lt;p&gt;Consider this SQL:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Well you hardly need a ExecuteMultipleRequest for this, but if you really wanted to you could create one no problem. I am going to assume you are already familiar with the code to create a ExecuteMultipleRequest - if not it&amp;rsquo;s described &lt;a href=&#34;https://msdn.microsoft.com/en-gb/library/jj863631.aspx&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This equates to the following:&lt;/p&gt;

&lt;p&gt;Either:-
&lt;ol&gt;
  &lt;li&gt;A single CreateRequestMessage.&lt;/li&gt;
  &lt;li&gt;An ExecuteMultipleRequest containing a single CreateRequestMessage.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;I hope you are with me so far..&lt;/p&gt;

&lt;h3 id=&#34;take-it-up-a-notch&#34;&gt;Take It Up A Notch&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s now imagine that when a contact is INSERTED, an &lt;code&gt;accountnumber&lt;/code&gt; is generated on the server, and that we want to grab this value using a single roundtrip with the server.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s it is in T-SQL:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OUTPUT&lt;/span&gt; inserted.accountnumber &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This equates to the following using the SDK:-&lt;/p&gt;

&lt;p&gt;SORRRY DAVE. YOU CAN&amp;rsquo;T DO THAT.&lt;/p&gt;

&lt;p&gt;The problem being, is that to do this in one roundtrip with the CRM server means building an ExecuteMultipleRequest that contains:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A CreateRequestMessage (to insert / create the contact)&lt;/li&gt;
  &lt;li&gt;A RetrieveRequestMessage (to retrieve the accountnumber of the inserted contact)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However in order to construct the appropriate RetrieveRequestMessage we need to know the ID of what the inserted contact will be in advance. If you look at the SQL query - we are not specifying an ID in advance - therefore we cannot perform the equivalent to this query.&lt;/p&gt;

&lt;h3 id=&#34;a-bit-further&#34;&gt;A bit further..&lt;/h3&gt;

&lt;p&gt;With the previous example in mind, consider the following SQL&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (contactid, firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OUTPUT&lt;/span&gt; inserted.accountnumber &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;2f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you are quick, you&amp;rsquo;ve already cottoned on that this one is possible, and it equates to:-&lt;/p&gt;

&lt;p&gt;An ExecuteMultipleRequest (ContinueOnError = false) containing:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A CreateRequestMessage (to insert / create the contact) 
  &lt;/li&gt;
  &lt;li&gt;A RetrieveRequestMessage - to retrieve the &#34;accountnumber&#34; of the created entity)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;let-s-start-to-push-the-boat-out-a-little&#34;&gt;Let&amp;rsquo;s start to push the boat out a little.&lt;/h3&gt;

&lt;p&gt;Here is a batch of T-SQL commands:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;UPDATE&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;SET&lt;/span&gt; lastname &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Johnson&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; contactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;3a4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;FROM&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; contactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;4b4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, we know that SQL Server would execute that SQL, by executing each sql command within that batch in sequence, and if there were any errors it will not continue to process the rest of the commands in the same batch. It would also not execute that batch within a transaction, so it would not roll back should errors occur half way through etc.&lt;/p&gt;

&lt;p&gt;This equates to:&lt;/p&gt;

&lt;p&gt;An ExecuteMultipleRequest (ContinueOnError = false) - containing the following messages:
&lt;ol&gt;
  &lt;li&gt;A CreateRequestMessage (to insert / create the contact)
  &lt;/li&gt;
  &lt;li&gt;An UpdateRequestMessage(to update the contact)&lt;/li&gt;
  &lt;li&gt;A DeleteRequestMessage&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;It seems like this is a good fit between the SQL and an ExecuteMultipleRequest.&lt;/p&gt;

&lt;h3 id=&#34;the-boat-is-now-heading-towards-the-open-ocean&#34;&gt;The boat is now heading towards the open ocean&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s add a bit of complexity to the previous T-SQL - consider this:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (contactid, firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OUTPUT&lt;/span&gt; inserted.accountnumber &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;2f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;UPDATE&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;SET&lt;/span&gt; lastname &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Johnson&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; contactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;3a4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;FROM&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; contactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;4b4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first command in that batch of SQL commands is this:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (contactid, firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OUTPUT&lt;/span&gt; inserted.accountnumber &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;2f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And we know that this actually equates to 2 seperate RequestMessages, a CreateRequest and a RetrieveRequest. We then also need to do an Update and a then a Delete. So this equates to:&lt;/p&gt;

&lt;p&gt;An ExecuteMultipleRequest (ContinueOnError = false)&lt;/p&gt;

&lt;p&gt;Containing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A CreateRequestMessage (to insert / create the contact) 
  &lt;/li&gt;
  &lt;li&gt;A RetrieveRequestMessage - to retrieve the &#34;accountnumber&#34; of the created entity.&lt;/li&gt;
  &lt;li&gt;An UpdateRequestMessage&lt;/li&gt;
  &lt;li&gt;A DeleteRequestMessage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ok good so far!&lt;/p&gt;

&lt;h3 id=&#34;should-look-at-boat-breakdown-cover&#34;&gt;Should look at Boat Breakdown cover&lt;/h3&gt;

&lt;p&gt;Now consider this one:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;OUTPUT&lt;/span&gt; inserted.accountnumber &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;FROM&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; contactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What this says is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We want to Insert a Contact, output its account number.&lt;/li&gt;
&lt;li&gt;Then in a second &amp;ldquo;batch&amp;rdquo; of sql statements - we want to Delete a contact. The second batch needs to execute regardless of any problem or outcome from the first batch - (The GO keyword is used as a batch seperator in T-SQL)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What this translates into is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A CreateRequest that allways needs to be executed.&lt;/li&gt;
&lt;li&gt;A RetreiveRequest (to retrieve the &amp;ldquo;accountnumber&amp;rdquo;) which should only be executed if the preceeding CreateRequest succeeds.&lt;/li&gt;
&lt;li&gt;A DeleteRequest that allways needs to be executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Can we construct the equivalent ExecuteMultipleRequest to do that?&lt;/p&gt;

&lt;p&gt;Well.. the answer is.. we can semantically construct an appropriate ExecuteMultipleRequest, but it won&amp;rsquo;t be supported by CRM - because you are not allowed to nest ExecuteMultipleRequest - if you do the CRM server will throw an error when you send it such a request.&lt;/p&gt;

&lt;p&gt;Here is what that looks like though (if only it was supported by the server!)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An ExecuteMultipleRequest (ContinueOnError = true) Containing:

&lt;ol&gt;
&lt;li&gt;An ExecuteMultipleRequest (ContinueOnError = false) Containing:

&lt;ol&gt;
&lt;li&gt;A CreateRequest to create the contact&lt;/li&gt;
&lt;li&gt;A RetrieveRequestMessage - to retrieve the &amp;ldquo;accountnumber&amp;rdquo; of created entity&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;A DeleteRequestMessage
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As I say, constructing such a Request is possible, but the CRM server won&amp;rsquo;t process it due to current runtime limitations that are imposed about not allowing nested ExecuteMultipleRequests.&lt;/p&gt;

&lt;p&gt;So - unfortunately we have hit a CRM limitation here.&lt;/p&gt;

&lt;p&gt;But what you could do, is, on the client side, split that SQL statement on the &lt;code&gt;GO&lt;/code&gt; keyword, to get each &lt;code&gt;batch&lt;/code&gt; of T-SQL commands. Then for each batch, construct and send an appropriate ExecuteMultipleRequest for the statements in that batch.&lt;/p&gt;

&lt;h3 id=&#34;what-have-we-learned-so-far&#34;&gt;What have we learned so far&lt;/h3&gt;

&lt;p&gt;The ExecuteMultipleRequest provides the ability to send a single &amp;ldquo;batch&amp;rdquo; of commands to the server. Thinking from a SQL perspective, this is akin to sending all the statements upto a &amp;ldquo;GO&amp;rdquo; keyword (batch seperator). To get the same behaviour as SQL though, you should set &lt;code&gt;ContinueOnError&lt;/code&gt; to false - so that processing halts if any request in the batch errors.&lt;/p&gt;

&lt;p&gt;The ExecuteMultipleRequest is not a good fit for sending multiple individual &lt;code&gt;batches&lt;/code&gt; of operations to the CRM server, as there is no way to group the Requests within a ExecuteMultipleRequest into their batches. For this reason it&amp;rsquo;s probably best to think of ExecuteMultipleRequest as a single SQL batch and to always use &lt;code&gt;ContinueOnError&lt;/code&gt; = false if you want to mirror the behaviour of SQL as closely as possible.&lt;/p&gt;

&lt;h2 id=&#34;a-weird-scenario-can-send-multiple-batches-in-one-go-as-long-as-each-batch-contains-1-requestmessage-only&#34;&gt;A weird scenario - can send multiple batches in one go - as long as each batch contains 1 RequestMessage only.&lt;/h2&gt;

&lt;p&gt;Consider the following T-SQL:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;INTO&lt;/span&gt; contact (firstname, lastname) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;albert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;einstein&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;FROM&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; contactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;UPDATE&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;SET&lt;/span&gt; firstname &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;bob&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; lastname &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Hoskins&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this scenario - each batch of commands contains only a single command. What this means is that you can construct an ExecuteMultipleRequest with &amp;lsquo;ContinueOnError&amp;rsquo; set to true, and there will be no danger that a particular command in a batch will error, and that the rest of the commands in that batch will execute regardless - because there is only a single command in each batch!&lt;/p&gt;

&lt;p&gt;For an example of the danger I am referring to here, consider this:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;FROM&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; contactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;FROM&lt;/span&gt; account &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; primarycontactid &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;6f4941ec-2f6f-4c7f-8adc-c6f4fb002d42&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;UPDATE&lt;/span&gt; contact &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;SET&lt;/span&gt; firstname &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;bob&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;WHERE&lt;/span&gt; lastname &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Hoskins&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;GO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The first batch above, contains 2 operations. The second batch contains 1.&lt;/p&gt;

&lt;p&gt;Now imagine, that for the above - we constructed an ExecuteMultipleRequest, and set &amp;lsquo;ContinueOnError&amp;rsquo; to true (to enable the server to process both batches regardless of whether the first batch fails.)
Well in that scenario, because the first batch actually contains 2 operations, the &amp;lsquo;ContinueOnError&amp;rsquo; = true would actually apply to each operation within that batch as well. So you could hit a scenario where the first Delete in that first batch errored, but then CRM continued on regardless to execute the second DELETE etc. This is not what the semantics of the above SQL query conveys - i.e the equivalent CRM beahviour for the above SQL query would be for it to stop processing a particular batch as soon as it hits an error. The only way this can be satisfied at present is if each batch only contains a single RequestMessage.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;If you would like to send a batch of commands to the CRM server in one go, the good news is you can. The bad news is, it&amp;rsquo;s not perfect, there are limitations, and hopefully I have shown you just about how far you can stretch things.&lt;/p&gt;

&lt;p&gt;If you need to send multiple batches of commands to the CRM server in one go, the good news is you can if each batch contains only a single request message (i.e Create, Retreive, Delete, Update etc) - the bad news is, if thats not the case, then you will need to send each batch as an individual ExecuteMultipleRequest, and implement your own &amp;ldquo;ContinueOnError&amp;rdquo; behaviour clientside such that should one ExecuteMultipleRequest fail to be processed it doesn&amp;rsquo;t halt subsequent batches (ExecuteMultipleRequests) from being processed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CRM / Plugin Generated Values - and Reducing Roundtrips!</title>
      <link>http://darrelltunnell.net/blog/2014/12/22/crm-plugin-generated-values-and-reducing-roundtrips/</link>
      <pubDate>Mon, 22 Dec 2014 17:50:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2014/12/22/crm-plugin-generated-values-and-reducing-roundtrips/</guid>
      <description>&lt;h3 id=&#34;setting-the-scene&#34;&gt;Setting the Scene&lt;/h3&gt;

&lt;p&gt;Imagine we have an application that uses the CRM SDK. It needs to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new &lt;code&gt;account&lt;/code&gt; entity in crm.&lt;/li&gt;
&lt;li&gt;Get some value that was just generated as a result of a synchronous plugin that fires on the create. For example, suppose there is a plugin that generates an account reference number.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;the-i-don-t-care-about-network-latency-method&#34;&gt;The &amp;ldquo;I don&amp;rsquo;t care about network latency method!&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;The &amp;lsquo;I don&amp;rsquo;t care about network latency&amp;rsquo; way of dealing with this is to just do 2 seperate Requests (roundtrips) with the CRM server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the new &lt;code&gt;account&lt;/code&gt; which returns you the ID.&lt;/li&gt;
&lt;li&gt;Retrieve the &lt;code&gt;account&lt;/code&gt; using that ID, along with the values that you need.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach is sub optimal where network latency is a concern, as it incurs the penalty of making two roundtrips accross the network with the server, where 1 is possible.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s now have a look at the &amp;ldquo;I&amp;rsquo;m running on a 56k modem method&amp;rdquo; of doing the same thing!
&lt;/p&gt;

&lt;h3 id=&#34;the-i-m-running-on-a-56k-modem-method-this-weeks-pro-tip&#34;&gt;The &amp;ldquo;I&amp;rsquo;m running on a 56k modem method&amp;rdquo; - this weeks pro tip!&lt;/h3&gt;

&lt;p&gt;For quite some time now - as of &lt;code&gt;CRM 2011 Update Rollup 12 - (SDK 5.0.13)&lt;/code&gt; you can utilise the &lt;a href=&#34;http://msdn.microsoft.com/en-gb/library/jj863604.aspx&#34;&gt;Execute Multiple&lt;/a&gt; request to do this kind of thing in one roundtrip with the CRM server.&lt;/p&gt;

&lt;p&gt;Here is an example of creating an account, and retrieiving it in a single round trip:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; 				 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Create an ExecuteMultipleRequest object.&lt;/span&gt;
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; multipleRequests = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ExecuteMultipleRequest()
                {
                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Assign settings that define execution behavior: continue on error, return responses. &lt;/span&gt;
                    Settings = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ExecuteMultipleSettings()
                    {
                        ContinueOnError = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;,
                        ReturnResponses = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;
                    },
                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Create an empty organization request collection.&lt;/span&gt;
                    Requests = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; OrganizationRequestCollection()
                };

                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; entity = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Entity(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;);
                entity.Id = Guid.NewGuid();
                entity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;] = &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;experimental test&amp;quot;&lt;/span&gt;;

                CreateRequest createRequest = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; CreateRequest
                {
                    Target = entity
                };

                RetrieveRequest retrieveRequest = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; RetrieveRequest
                {
                    Target = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; EntityReference(entity.LogicalName, entity.Id),
                    ColumnSet = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ColumnSet(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;createdon&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// list the fields that you want here&lt;/span&gt;
                };

                multipleRequests.Requests.Add(createRequest);
                multipleRequests.Requests.Add(retrieveRequest);

                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Execute all the requests in the request collection using a single web method call.&lt;/span&gt;
                ExecuteMultipleResponse responseWithResults = (ExecuteMultipleResponse)orgService.Execute(multipleRequests);
                             
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; createResponseItem = responseWithResults.Responses[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;];
                CreateResponse createResponse = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (createResponseItem.Response != &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;)
                {
                    createResponse = (CreateResponse)createResponseItem.Response;
                }

                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; retrieveResponseItem = responseWithResults.Responses[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;];

                RetrieveResponse retrieveResponse = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (retrieveResponseItem.Response != &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;)
                {
                    retrieveResponse = (RetrieveResponse)retrieveResponseItem.Response;
                }

                Console.Write(retrieveResponse.Entity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;createdon&amp;quot;&lt;/span&gt;]); &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// yup - we got the value we needed!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id=&#34;what-happened&#34;&gt;What happened?&lt;/h3&gt;

&lt;p&gt;Both the CreateRequest, and the RetrieveRequest (for the created entity) are batched up into a single Request and shipped off to the CRM server for processing.&lt;/p&gt;

&lt;p&gt;CRM processed them in that order, collated the responses together, and returned them in a single batch.&lt;/p&gt;

&lt;h3 id=&#34;caveats&#34;&gt;Caveats&lt;/h3&gt;

&lt;p&gt;One caveat of this approach is that, if you intend to grab the generated values for an entity that is being created, then you need to know in advance what the ID will be.&lt;/p&gt;

&lt;p&gt;This means you have to specify the ID of the entity when you create it yourself - you can&amp;rsquo;t let CRM auto create the new ID.&lt;/p&gt;

&lt;p&gt;For updates / deletes this is a non issue, as the ID is allready known.&lt;/p&gt;

&lt;h3 id=&#34;last-thoughts-sql-optimisation&#34;&gt;Last thoughts - SQL Optimisation&lt;/h3&gt;

&lt;p&gt;I speculate that specifying your own ID&amp;rsquo;s &lt;em&gt;might be a bad thing&lt;/em&gt; if you don&amp;rsquo;t use Sequential Guid&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;When CRM generates Id&amp;rsquo;s for you, it generates them sequentially, and I beleive there may be SQL performance benefits to this in terms of index optimisation etc. So if using Guid.NewGuid() to create your new Id&amp;rsquo;s you may want to check with a SQL guru first to understand any impact of using random Guid&amp;rsquo;s as Id&amp;rsquo;s on performance of the CRM tables! That said - Microsoft do support this, so it can&amp;rsquo;t be too bad..&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unit Testing Dynamics CRM Plugins</title>
      <link>http://darrelltunnell.net/blog/2014/12/14/unit-testing-dynamics-crm-plugins/</link>
      <pubDate>Sun, 14 Dec 2014 17:50:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2014/12/14/unit-testing-dynamics-crm-plugins/</guid>
      <description>&lt;h3 id=&#34;there-is-no-spoon-crm&#34;&gt;There is no &lt;del&gt;Spoon&lt;/del&gt; CRM&lt;/h3&gt;

&lt;p&gt;The purpose of this post will be to look at the code for a fairly typical looking crm plugin, and examine how to implement a unit test with the least possible effort. Reduced Effort == Reduced Person Hours == Reduced Cost.&lt;/p&gt;

&lt;p&gt;Remember, this is Unit Testing, not Integration testing - so at test time - there is no CRM!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-plugin-and-it-s-requirements&#34;&gt;A plugin - and it&amp;rsquo;s requirements&lt;/h3&gt;

&lt;p&gt;Firstly, let&amp;rsquo;s look at a plugin that we will call the &lt;code&gt;ReclaimCreditPlugin&lt;/code&gt;. Here are the requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It must run only within a transaction with the database.&lt;/li&gt;
&lt;li&gt;When a Contact entity is Updated, if the contact has a parent account, and that parent account is &amp;ldquo;on hold&amp;rdquo; then set the &amp;ldquo;taketheirshoes&amp;rdquo; flag on the contact record to true.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;developer-jon-doe&#34;&gt;Developer Jon Doe&lt;/h3&gt;

&lt;p&gt;Jon Doe immediately gets to work on writing the plugin for those requirements. He produces the following plugin:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ReclaimCreditPlugin&lt;/span&gt; : IPlugin
    {

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Execute&lt;/span&gt;(IServiceProvider serviceProvider)
        {

            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; executionContext = (IPluginExecutionContext)serviceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(IPluginExecutionContext));

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1. We must run only within a transaction&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (!executionContext.IsInTransaction)
            {
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;InvalidPluginExecutionException&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The plugin detected that it was not running within a database transaction. The plugin requires a database transaction.&amp;quot;&lt;/span&gt;);
            }

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2. Get the contact, check its parent account.&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (executionContext.InputParameters.Contains(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Target&amp;quot;&lt;/span&gt;) &amp;amp;&amp;amp; executionContext.InputParameters[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Target&amp;quot;&lt;/span&gt;] &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;is&lt;/span&gt; Entity)
            {
                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Obtain the target entity from the input parameters.&lt;/span&gt;
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; contactEntity = (Entity)executionContext.InputParameters[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Target&amp;quot;&lt;/span&gt;];
                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Get the parent account id.&lt;/span&gt;
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; parentAccountId = (EntityReference)contactEntity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;parentaccountid&amp;quot;&lt;/span&gt;];

                &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Get the parent account entity.&lt;/span&gt;
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; orgServiceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(IOrganizationServiceFactory));
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; orgService = orgServiceFactory.CreateOrganizationService(executionContext.UserId);
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; parentAccountEntity = orgService.Retrieve(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;, parentAccountId.Id, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ColumnSet(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;creditonhold&amp;quot;&lt;/span&gt;));

                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; accountOnHold = (&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;)parentAccountEntity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;creditonhold&amp;quot;&lt;/span&gt;];

                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (accountOnHold)
                {
                    contactEntity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;taketheirshoes&amp;quot;&lt;/span&gt;] = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;;
                    &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; tracingService = (ITracingService)serviceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(ITracingService));
                    tracingService.Trace(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Have indicated that we should take the shoes from contact: {0}&amp;quot;&lt;/span&gt;, contactEntity.Id.ToString());
                }

            }

        }

    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id=&#34;good-job&#34;&gt;Good Job?&lt;/h4&gt;

&lt;p&gt;Take a moment to peer review the above code. Would you vindicate Jon Doe&amp;rsquo;s effort? It seems it has all the required logic in all the required places. It appears he has covered the list of requirements. Although Jon doesn&amp;rsquo;t check to make sure the current entity being updated is definately a contact entity.. But within the confines of this blog post we will assume that there is no possible danger that the plugin could ever be registered against the wrong entity.&lt;/p&gt;

&lt;p&gt;So.. does it actually work?&lt;/p&gt;

&lt;h3 id=&#34;does-it-work&#34;&gt;Does it work?&lt;/h3&gt;

&lt;p&gt;Assuming you want to start haemorrhaging people&amp;rsquo;s time accross the organisation, one way to find out if this code works is to immediately go through the process of deploying it to a QA environment, getting someone to test it manually, and then repeating that cycle of Dev &amp;ndash;&amp;gt; Deployment &amp;ndash;&amp;gt; QA as often as necessary, until the tester gives the thumbs up.&lt;/p&gt;

&lt;p&gt;If you want to go that route, feel free to skip the rest of this article. Otherwise read on, where sanity awaits!&lt;/p&gt;

&lt;h3 id=&#34;show-me-a-unit-test-already&#34;&gt;Show me a Unit Test Already!&lt;/h3&gt;

&lt;p&gt;Bad news for you. I could.. but I won&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;why-won-t-you-show-me-a-unit-test&#34;&gt;Why won&amp;rsquo;t you show me a unit test?&lt;/h3&gt;

&lt;p&gt;In short, because I value my time. Just look at that code again for crying out loud! It&amp;rsquo;s littered with dependencies on things that are only provided at runtime by Dynamics CRM - things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IServiceProvider&lt;/li&gt;
&lt;li&gt;IPluginExecutionContext&lt;/li&gt;
&lt;li&gt;IOrganizationServiceFactory&lt;/li&gt;
&lt;li&gt;IOrganizationService&lt;/li&gt;
&lt;li&gt;ITracingService&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;WHAT THE HELL ARE ANY OF THESE THINGS TO DO WITH THE ACTUAL REQUIREMENTS THAT I &lt;em&gt;NEED&lt;/em&gt; TO TEST???&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Listen.. I read those requirements for this plugin. I read them atleast one thousand times. And I wrote them in fact. Here they are again:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;It must run only within a transaction with the database.&lt;/li&gt;
&lt;li&gt;When a Contact entity is Updated, if the contact has a parent account, and that parent account is &amp;ldquo;on hold&amp;rdquo; then set the &amp;ldquo;taketheirshoes&amp;rdquo; flag on the contact record to true.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So with that in mind, can you please show me the requirement dictating: &lt;code&gt;When a contact is updated, it is of upmost importance to us as a business that it looks at the&lt;/code&gt;IPluginExecutionContext&lt;code&gt;and grabs the&lt;/code&gt;IOrganizationServiceFactory.`&lt;/p&gt;

&lt;p&gt;Or please show me where the requirements state: &lt;code&gt;When a contact is updated, the plugin absolutely must interact with the&lt;/code&gt;IServiceProvider` because otherwise you know.. Our business just won&amp;rsquo;t function anymore.&lt;/p&gt;

&lt;p&gt;No my friends. The requirements do not say &lt;em&gt;any of that&lt;/em&gt;. I am in the business of testing against the requirements.&lt;/p&gt;

&lt;h4 id=&#34;why-is-that-a-problem&#34;&gt;Why is that a problem?&lt;/h4&gt;

&lt;p&gt;The problem is not obvious at first glance. It is definately technically possible to mock / fake all of those services at unit test time. You can use something like RhinoMocks or another Mocking library to mock out &lt;code&gt;IServiceProvider&lt;/code&gt; for the purposes of your test. You would then have to mock out all the calls to &lt;code&gt;IServiceProvider&lt;/code&gt; that are made, so that it returns your other &amp;lsquo;mocked&amp;rsquo; services like a mock &amp;lsquo;IPluginExecutionContext&amp;rsquo; etc etc - and down the rabbit hole you go.&lt;/p&gt;

&lt;p&gt;The problem, is about &lt;em&gt;effort&lt;/em&gt;. This approach, although technically possible, requires significant &lt;em&gt;effort&lt;/em&gt;. You would have to mock a tonne of runtime services and interactions. We have to ask ourselves, is all that effort really necessary? Sometimes it may be, but most of the time, it isn&amp;rsquo;t. In this instance it definately isn&amp;rsquo;t and I will explain why.&lt;/p&gt;

&lt;h3 id=&#34;let-s-use-the-requirements-to-write-the-plugin-in-pseudo-code&#34;&gt;Let&amp;rsquo;s use the requirements to write the plugin, in pseudo code.&lt;/h3&gt;

&lt;p&gt;With those requirements - forget everything you know about Dynamics Crm and write your ideal pseudo code that would implement those requirements. This is the actual logic we care about testing.&lt;/p&gt;

&lt;p&gt;PSEUDO CODE:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (!IsRunningInTransaction)
{
	Throw &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Plugin requires a transaction.&amp;quot;&lt;/span&gt;
}

If (IsUpdateOf(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;))
{

&lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; contact = GetTargetEntity();
&lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; account = GetAccountForContact(contact);

&lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; isOnHold = (&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;)account[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;creditonhold&amp;quot;&lt;/span&gt;];
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;(isOnHold)
{
 	contact[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;taketheirshoes&amp;quot;&lt;/span&gt;] = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id=&#34;look-at-that-pseudo-code-do-you-see-any-runtime-services&#34;&gt;Look at that Pseudo Code -  Do you see &lt;em&gt;any&lt;/em&gt; runtime services?&lt;/h3&gt;

&lt;p&gt;Notice how it contains only the logic we really care about testing - the logic as described by the requirements. It doesn&amp;rsquo;t contain needless fluff. No &lt;code&gt;IServiceProvider&lt;/code&gt;, No &lt;code&gt;IPluginExecutionContext&lt;/code&gt;. It looks very simple, very basic. If we could actually write a CRM plugin like this, it would be about 1.5 million times easier to test. Well we can.&lt;/p&gt;

&lt;h3 id=&#34;isolating-out-dependencies-is-the-key-to-unit-testing&#34;&gt;Isolating out dependencies is the key to unit testing.&lt;/h3&gt;

&lt;p&gt;Yes it&amp;rsquo;s true folks you heard it here first. The less dependencies you utilise directly in your methods, the easier they are to unit test.&lt;/p&gt;

&lt;p&gt;With this principle in mind, let&amp;rsquo;s revisit our plugin and refactor it to remove some dependencies.&lt;/p&gt;

&lt;h3 id=&#34;new-and-improved-plugin&#34;&gt;New and Improved Plugin&lt;/h3&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ReclaimCreditPlugin2&lt;/span&gt; : IPlugin
    {

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; IServiceProvider _ServiceProvider;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Execute&lt;/span&gt;(IServiceProvider serviceProvider)
        {
            _ServiceProvider = serviceProvider;
            Execute();
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// This is the method containing the business logic that we want to be able to assert at unit test time.&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Execute&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1. We must run only within a transaction&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (IsInTransaction())
            {
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;InvalidPluginExecutionException&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The plugin detected that it was not running within a database transaction. The plugin requires a database transaction.&amp;quot;&lt;/span&gt;);
            }

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 2. Get the contact&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; contact = GetTargetEntity();

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 3. Get the Parent Account for the contact.&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; parentAccount = GetAccountEntity(contact);
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (parentAccount == &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;)
            {
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;;
            }

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 4. If credit on hold, set taketheirshoes.&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; accountOnHold = (&lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt;)parentAccount[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;creditonhold&amp;quot;&lt;/span&gt;];
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (accountOnHold)
            {
                contact[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;taketheirshoes&amp;quot;&lt;/span&gt;] = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;;
            }

        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// Returns the parent account entity for the contact.&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;param name=&amp;quot;contact&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; Entity &lt;span style=&#34;color: #0000FF&#34;&gt;GetAccountEntity&lt;/span&gt;(Entity contact)
        {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Get the p[arent account id.&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; parentAccountId = (EntityReference)contact[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;parentaccountid&amp;quot;&lt;/span&gt;];

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Get an instance of the IOrganisationService.&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; orgServiceFactory = (IOrganizationServiceFactory)_ServiceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(IOrganizationServiceFactory));
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; executionContext = (IPluginExecutionContext)_ServiceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(IPluginExecutionContext));
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; orgService = orgServiceFactory.CreateOrganizationService(executionContext.UserId);
            
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Get the account entity, with only the column / attribute that we need.&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; parentAccountEntity = orgService.Retrieve(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;, parentAccountId.Id, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ColumnSet(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;creditonhold&amp;quot;&lt;/span&gt;));
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; parentAccountEntity;
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// Returns the current &amp;quot;Target&amp;quot; entity that the plugin is executing against.&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; Entity &lt;span style=&#34;color: #0000FF&#34;&gt;GetTargetEntity&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; context = (IPluginExecutionContext)_ServiceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(IPluginExecutionContext));
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (context.InputParameters.Contains(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Target&amp;quot;&lt;/span&gt;) &amp;amp;&amp;amp; context.InputParameters[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Target&amp;quot;&lt;/span&gt;] &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;is&lt;/span&gt; Entity)
            {
                &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; contactEntity = (Entity)context.InputParameters[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Target&amp;quot;&lt;/span&gt;];
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; contactEntity;
            }

            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;;
        }

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// Returns whether the plugin is currently enrolled within a database transaction.&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;IsInTransaction&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; context = (IPluginExecutionContext)_ServiceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(IPluginExecutionContext));
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; context.IsInTransaction;
        }

    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id=&#34;what-just-happened&#34;&gt;What just happened?&lt;/h3&gt;

&lt;p&gt;I applied a technique called the &lt;a href=&#34;http://taswar.zeytinsoft.com/2009/03/08/extract-and-override-refactoring-technique/&#34;&gt;Extract and Override&lt;/a&gt; technique, to remove the concrete references to all of those CRM runtime only services from within the Execute method, and instead they are now referenced within virtual methods which can be overriden at unit test time.&lt;/p&gt;

&lt;p&gt;For example rather than having the following code directly within the execute method:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; executionContext = (IPluginExecutionContext)serviceProvider.GetService(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(IPluginExecutionContext));

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// 1. We must run only within a transaction&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (!executionContext.IsInTransaction)
            {
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It has been replaced by a call to virtual method:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  	        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (IsInTransaction())
            {
            
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Because the interactions with the various CRM runtime Services now occur within Virtual methods, we no longer need to mock them up at unit test time. Say goodbye to having to mockup &lt;code&gt;IPluginExecutionContext&lt;/code&gt;, &lt;code&gt;IServiceProvider&lt;/code&gt; or &lt;em&gt;any&lt;/em&gt; of the Crm runtime services. All we need to do now is just override the various virtual methods that our Execute() method calls, and return appropriate values at test time.&lt;/p&gt;

&lt;h3 id=&#34;ok-so-now-will-you-show-me-a-unit-test&#34;&gt;Ok so - Now will you show me a Unit Test??&lt;/h3&gt;

&lt;p&gt;Certainly Sir / Madame. Now that I can write one within a few minutes as opposed to a few hours, your wish is my command:-&lt;/p&gt;

&lt;p&gt;For the purpose of our unit tests all we do, is create a class that derives from our original plugin class, but overrides the various virtual methods to provide different values at test time.&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;UnitTestableReclaimCreditPlugin&lt;/span&gt; : ReclaimCreditPlugin2
    {

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;UnitTestableReclaimCreditPlugin&lt;/span&gt;()
        {
            AccountIsOnHold = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;;
            IsRunningInTransaction = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;;
            ContactEntity = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Entity(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;contact&amp;quot;&lt;/span&gt;);
        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; Entity &lt;span style=&#34;color: #0000FF&#34;&gt;GetTargetEntity&lt;/span&gt;()
        {
            ContactEntity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;parentaccountid&amp;quot;&lt;/span&gt;] = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; EntityReference(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;, Guid.NewGuid());
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; ContactEntity;
        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; Entity &lt;span style=&#34;color: #0000FF&#34;&gt;GetAccountEntity&lt;/span&gt;(Entity contact)
        {
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; accountEntity = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Entity(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;);
            accountEntity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;creditonhold&amp;quot;&lt;/span&gt;] = AccountIsOnHold;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; accountEntity;
        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;IsInTransaction&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; IsRunningInTransaction;
        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; AccountIsOnHold { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;set&lt;/span&gt;; }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;bool&lt;/span&gt; IsRunningInTransaction { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;set&lt;/span&gt;; }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Entity ContactEntity { &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;set&lt;/span&gt;; }

    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id=&#34;and-here-are-the-unit-tests&#34;&gt;And here are the Unit Tests&lt;/h3&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;    [TestFixture]&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ReclaimCreditPluginUnitTests&lt;/span&gt;
    {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;ReclaimCreditPluginUnitTests&lt;/span&gt;()
        {

        }

&lt;span style=&#34;color: #7D9029&#34;&gt;        [ExpectedException(typeof(InvalidPluginExecutionException),&lt;/span&gt;
&lt;span style=&#34;color: #7D9029&#34;&gt;            ExpectedMessage = &amp;quot;The plugin detected that it was not running within a database transaction&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #7D9029&#34;&gt;            MatchType = MessageMatch.Contains)]&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Should_Only_Run_Within_Transaction&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// arrange&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; sut = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnitTestableReclaimCreditPlugin();
            sut.IsRunningInTransaction = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// act &lt;/span&gt;
            sut.Execute();

        }


        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Should_Take_Shoes_When_Credit_On_Hold&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// arrange&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; sut = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnitTestableReclaimCreditPlugin();
            sut.IsRunningInTransaction = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;;
            sut.AccountIsOnHold = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// act &lt;/span&gt;
            sut.Execute();

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//assert&lt;/span&gt;
            Assert.That(sut.ContactEntity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;taketheirshoes&amp;quot;&lt;/span&gt;], Is.EqualTo(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;));

        }

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;Should_Not_Take_Shoes_When_Credit_Not_On_Hold&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// arrange&lt;/span&gt;
            &lt;span style=&#34;color: #B00040&#34;&gt;var&lt;/span&gt; sut = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnitTestableReclaimCreditPlugin();
            sut.IsRunningInTransaction = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;;
            sut.AccountIsOnHold = &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// act &lt;/span&gt;
            sut.Execute();

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//assert&lt;/span&gt;
            Assert.That(sut.ContactEntity[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;taketheirshoes&amp;quot;&lt;/span&gt;], Is.Not.EqualTo(&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;));

        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h3&gt;

&lt;p&gt;I hope I have demonstrated a simple plugin, with a simple set of unit tests. More importantly, I hope I have demonstrated that although it may be technically possible to write a unit test for an exising plugin,  by mocking up every CRM runtime service and interaction that the plugin makes,just because such a thing is possible, doesn&amp;rsquo;t mean you should just do it. First the work has to be justified. To justify just what is necessary, examine the requirements, examine the plugin code, and be absolutely clear on what it is you want to cover in your unit tests. With that in mind, refactor the plugin code to eliminate fluff (extraneoues concrete references to dependencies that are surplus to the requirements that you want to test). Use techniques like the &lt;code&gt;Extract and Override&lt;/code&gt; technique to allow you to substitute these dependencies easily at test time. When you do this, you may be surprised at how much simpler it becomes to write unit tests. I would aslo reccommend reading a book on unit testing, I found &lt;a href=&#34;http://artofunittesting.com/&#34;&gt;The Art of Unit Testing&lt;/a&gt; very educational on this topic.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>