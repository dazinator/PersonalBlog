<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnetnuke on Darrell Tunnell</title>
    <link>http://darrelltunnell.net/tags/dotnetnuke/index.xml</link>
    <description>Recent content in Dotnetnuke on Darrell Tunnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="http://darrelltunnell.net/tags/dotnetnuke/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dnn Extensions - Sources Packages?</title>
      <link>http://darrelltunnell.net/blog/2016/03/19/dnn-extensions---sources-packages/</link>
      <pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2016/03/19/dnn-extensions---sources-packages/</guid>
      <description>&lt;p&gt;I have been doing some work on DnnPackager recently, and I&amp;rsquo;ve come accross the concept of &amp;ldquo;Source&amp;rdquo; packages. I have to admit I am not entirely new to these, but I&amp;rsquo;ve never personally used them for my projects in the past.&lt;/p&gt;

&lt;p&gt;Source packages are basically identical to the ordinary install zip&amp;rsquo;s for your dnn module / extension, i.e you &amp;ldquo;install&amp;rdquo; them into your Dnn site like any other install package, except that they also include &amp;ldquo;source code&amp;rdquo; files within them, like .cs, .vb files etc.
&lt;/p&gt;

&lt;h3 id=&#34;why-would-you-want-to-include-source-code-in-your-install-zip&#34;&gt;Why would you want to include source code in your install zip?&lt;/h3&gt;

&lt;p&gt;Well this is where things get a little interesting.&lt;/p&gt;

&lt;p&gt;The two main reasons I can fathom why you would want to include source code in an install zip are that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your module uses dynamic compilation, and so unless you include source files with the module installation, then it just won&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;You want to distribute your source code, so that developer&amp;rsquo;s (who pay for it?) can open it up in VS and own it / make changes (improvements?). Usually you&amp;rsquo;d charge for this option, but it&amp;rsquo;s faesible you are just an extremely generous developer (like me) who gives stuff away for free.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Number 1 is a necessity really to cater for modules that use dynamic compilation.&lt;/p&gt;

&lt;p&gt;Number 2 is an optional thing about you as a developer (or commercial entity), distributing your solution source code in a format that thrid parties can &amp;ldquo;own&amp;rdquo; it - irrespective of whether you have used dynamic compilation or not.&lt;/p&gt;

&lt;p&gt;Note: If you are using Dynamic compilation for your module, then people allready have the ability to make changes to the code by simply going into the website directory after the module has been installed, and modifying the code files. But you already knew that right!! Whether they are legally entitled to do so ofcourse, would be down to the licence agreement.&lt;/p&gt;

&lt;p&gt;Number 1 and 2 are different.&lt;/p&gt;

&lt;h3 id=&#34;why-are-they-different&#34;&gt;Why are they different?&lt;/h3&gt;

&lt;p&gt;Because in the first scenario, you are giving IIS the files it needs to compile and run your code within a Dnn website instance. In the second scenario, you are giving &lt;strong&gt;developers&lt;/strong&gt; the files they need, to open up your project / solution and &lt;strong&gt;build&lt;/strong&gt;, and compile your code, in a manner that spits out everything needed by scenario 1. In other words, the build and compilation that developers do, produces the output that&amp;rsquo;s needed within the website for the compilation that IIS does.&lt;/p&gt;

&lt;h3 id=&#34;why-was-that-last-bit-important&#34;&gt;Why was that last bit important&lt;/h3&gt;

&lt;p&gt;Because files related to the build that developers do - i,e the ones that prodice the output that actually needs to be installed to the dnn site, arguable have no business being installed into a Dnn website. Key files, project files, solution files etc etc - there are all completely unrelated to the working / running of your module within Dnn, and have nothing to do with IIS dynamic compilation or anything. They shouldn&amp;rsquo;t be installed in a website period (imho).&lt;/p&gt;

&lt;h3 id=&#34;dual-purpose&#34;&gt;Dual purpose&lt;/h3&gt;

&lt;p&gt;There seems to be a dual purpose for the sources package that doesn&amp;rsquo;t sit right with me.
Using it to install source code into the website to support dynamic compilation seems like what it is meant for imho - it is a Dnn installation zip after all.&lt;/p&gt;

&lt;p&gt;Using it to provide a third party with your VS solution / project files so that they can open up the solution in an IDE, build and compile the code is a completely different scenario, and I can&amp;rsquo;t see how that second scenario can work reliably just by including a .csproj in a dnn sources install zip - except for in the most simplisitic and basic of scenarios, which rarely happen in the real world.&lt;/p&gt;

&lt;h3 id=&#34;example-of-some-issues-with-including-sln-csproj-in-a-sources-zip-package&#34;&gt;Example of some issues with including Sln / Csproj in a sources zip package.&lt;/h3&gt;

&lt;p&gt;Currently, if you use widely available project templates to produce &amp;ldquo;sources&amp;rdquo; packages, they will by default, produce a sources &amp;ldquo;zip&amp;rdquo; file for each of the module projects in your solution, and this will contain source code files copied form your project, as well as the csproj, and sln file. (I think the sln will only get included if it lives within the project directory).&lt;/p&gt;

&lt;p&gt;Already we hit an issue, as if you have multiple projects in your solution, and the sln file lives in a parent directory of those projects like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
solution/mysln.sln
solution/projectA/projectA.csproj
solution/projectB/projectB.csproj

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(which is fairly normal) then the sln file usually won&amp;rsquo;t be included in the sources packages for any of your particular modules as it doesn&amp;rsquo;t live directly within a project directory.&lt;/p&gt;

&lt;p&gt;Secondly, if ProjectA has a project reference to ProjectB, and someone downloads the sources package for your projectA module, and opens up the csproj file that you have included in that sources package - the project is going to have a missing project reference to projectB so it won&amp;rsquo;t compile.&lt;/p&gt;

&lt;p&gt;There are yet more problems. If your .csproj files reference assemblies from some lib directory within your checkout directory somewhere, as this lib directory won&amp;rsquo;t be included in the sources package (because it doesn&amp;rsquo;t live within the project dir), anyone opening the project file in VS will see missing assembly references, they will have to manually correct them - otherwise the solution won&amp;rsquo;t compile.&lt;/p&gt;

&lt;p&gt;If your project files include some custom build targets that live on your machine, or within your checkout directory somewhere, etc etc - you guessed it the person opening the .csproj file is going to have issues because they won&amp;rsquo;t be included in the same location within the sources package.&lt;/p&gt;

&lt;h3 id=&#34;alternatives&#34;&gt;Alternatives?&lt;/h3&gt;

&lt;p&gt;If you want to give away your VS solution (or sell the source) to a third party, there are better / easier ways to provide access to it without shoehorning it in to the dnn install zip imho!&lt;/p&gt;

&lt;p&gt;The easiest may be to just zip up your entire solution (checkout directory), and allow that to be downloaded from some protected location. This does not have to be in a &amp;ldquo;dnn&amp;rdquo; install package format, just a simple zip file that the person recieving can extract and then open up the VS sln file. You want it to be like they just checked out the solution from source control and are now opening up the VS sln file - just like you do right?&lt;/p&gt;

&lt;p&gt;If there are some pre-requisites to being able to open and build the solution, add a readme to the zip that explains what a developer must do before attempting to open the solution. This is usually handy to have in your source control anyway - in case you ever need to checkout and open the solution on a new machine one day that doesn&amp;rsquo;t have your dependencies set up. These should be the same steps that any developer new to the company has to go through (including you) when checking out the code for the first time and wanting to open it.&lt;/p&gt;

&lt;h3 id=&#34;how-does-this-all-tie-in-with-dnnpackager&#34;&gt;How does this all tie in with DnnPackager?&lt;/h3&gt;

&lt;p&gt;Well, for the next realease of DnnPacakger, I have added rudimentary support for Sources packages (thanks to &lt;a href=&#34;https://github.com/nvisionative&#34;&gt;@nvisionative&lt;/a&gt; for requesting this feature) - so that it will now produce &amp;ldquo;sources&amp;rdquo; packages alongside the standard install zip. However this is currently for the purposes of supporting modules that need to include source files in their installation process into Dnn, which I suspect will mainly just be ones that use dynamic compilation.&lt;/p&gt;

&lt;p&gt;It won&amp;rsquo;t include .csproj files or .sln files because at this point in time, I can&amp;rsquo;t see how including them would lead to a reliable experience for the developer opening these up at the other end.&lt;/p&gt;

&lt;p&gt;Disagree? Leave some comments below, I&amp;rsquo;d love to be convinced - or to just hear your views!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DnnPackager - v2.0.6</title>
      <link>http://darrelltunnell.net/blog/2016/03/19/dnnpackager---v2.0.6/</link>
      <pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2016/03/19/dnnpackager---v2.0.6/</guid>
      <description>&lt;h3 id=&#34;dnnpackager-release-v2-0-6&#34;&gt;DnnPackager Release -v2.0.6&lt;/h3&gt;

&lt;p&gt;A short post to announce that a new minor release of DnnPackager is out.&lt;/p&gt;

&lt;p&gt;You can find the release notes here explaining what&amp;rsquo;s new: &lt;a href=&#34;https://github.com/dazinator/DnnPackager/releases/tag/2.0.6%2B2&#34;&gt;https://github.com/dazinator/DnnPackager/releases/tag/2.0.6%2B2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For an introduction to DnnPackager in general &lt;a href=&#34;http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started/&#34;&gt;see here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/nvisionative&#34;&gt;@nvisionative&lt;/a&gt; for requesting this feature.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Imagining a DotNetNuke Project Type for Visual Studio</title>
      <link>http://darrelltunnell.net/blog/2016/01/17/imagining-a-dotnetnuke-project-type-for-visual-studio/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2016/01/17/imagining-a-dotnetnuke-project-type-for-visual-studio/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;When developing DotNetNuke extensions, we typically use one of the existing Visual Studio Project Type&amp;rsquo;s, for example - an ASP.NET Web Application project.&lt;/p&gt;

&lt;p&gt;Even when using a Project Template such as Christoc&amp;rsquo;s, the project template is still based upon one of the standard Visual Studio project types - usually an ASP.NET Web Application project.&lt;/p&gt;

&lt;p&gt;However these Project Types do not &amp;ldquo;gel&amp;rdquo; well with DotNetNuke development in a number of areas, the main ones being:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Running the project in VS (clicking play) - wants to run the extensions as a Web Application, but this makes no sense for a Dnn extension - which has to be hosted by the DotNetNuke website.&lt;/li&gt;
&lt;li&gt;Deploying the extension - there is no support for that in the project system - you have to manually deploy your extensions to the Dnn instance.&lt;/li&gt;
&lt;li&gt;Debugging the extension - you have to manually attach to process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So.. what if there was a new Project Type, one that was purpose built for DotNetNuke development? What would that look like?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;introducing-the-dotnetnuke-project-type&#34;&gt;Introducing the &amp;ldquo;DotNetNuke&amp;rdquo; Project Type&lt;/h3&gt;

&lt;p&gt;I am currently developing a new VS Project Type explicitly for DotNetNuke development. The rest of this blog post will describe my vision for how this will work.&lt;/p&gt;

&lt;h4 id=&#34;installing-the-project-type&#34;&gt;Installing the Project Type&lt;/h4&gt;

&lt;p&gt;You would start by installing the VSIX package from the VS gallery. This will install the DotNetNuke project type, and make this project type available to you when you create new projects in VS.&lt;/p&gt;

&lt;h4 id=&#34;create-a-new-project&#34;&gt;Create a New Project&lt;/h4&gt;

&lt;p&gt;You can now create a new &amp;ldquo;DotNetNuke&amp;rdquo; project using Visual Studio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/new dnn project.PNG&#34; alt=&#34;new dnn project.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This creates your new project. It also imports the &amp;ldquo;DnnPackager&amp;rdquo; NuGet package automatically - &lt;a href=&#34;http://darrelltunnell.net/blog/2015/12/01/dnnpackager-getting-started/&#34;&gt;something I have blogged about seperately.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/adding DnnPackager.PNG&#34; alt=&#34;adding DnnPackager.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Your new project, has it&amp;rsquo;s own &amp;ldquo;.dnnproj&amp;rdquo; file. This is a new project type and that&amp;rsquo;s why it has its own file extension &amp;ldquo;.dnnproj&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/SolutionExplorer1.PNG&#34; alt=&#34;SolutionExplorer1.PNG&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;adding-content&#34;&gt;Adding Content&lt;/h4&gt;

&lt;p&gt;You can now add items to your project. If you &amp;ldquo;Add new item&amp;rdquo; - you will be able select from a number of standard DotNetNuke item templates. For example a &amp;ldquo;Module View&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/AddModuleView.png&#34; alt=&#34;AddModuleView.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, I will just show Dnn 7 compatible item templates, but eventually I&amp;rsquo;d also like to add a seperate group for Dnn 8 item templates, which would include item templates for the new MVC and SPA stuff.&lt;/p&gt;

&lt;p&gt;When you add the new item, not only do the source code files get added to your project, but any required dependencies also get brought in by the magical power of NuGet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/AddingDotNetNukeCoreNuget.PNG&#34; alt=&#34;AddingDotNetNukeCoreNuget.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So for example, adding a Module View for Dnn 7, will automatically bring in the DotNetNuke.Core NuGet package for Dnn7 as depicted above.&lt;/p&gt;

&lt;p&gt;In other words, you don&amp;rsquo;t need to worry about adding any Dnn assembly references for the most part, as they will be bought in for you as you add items to your project. Ofcourse, you are still free to add references to other dependencies you might have as normal.&lt;/p&gt;

&lt;h4 id=&#34;running-and-debugging&#34;&gt;Running and Debugging&lt;/h4&gt;

&lt;p&gt;When you want to run and debug your extension, for those of you that have read my previous blog about DnnPackager, you may recall that this could be accomplished via a command that you could enter in the Package Manager Console window and DnnPackager would handle the deployment and attaching the debugger.&lt;/p&gt;

&lt;p&gt;Well that approach was only ever necessary because there was not any first class support within VS itself. Something I am going to rectify with the DotNetNuke project type.&lt;/p&gt;

&lt;p&gt;In VS, I am going to extend the debugging toolbar (where the &amp;ldquo;play&amp;rdquo; button is)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/debug toolbar.PNG&#34; alt=&#34;debug toolbar.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see in the screenshot there is an empty dropdown at present, but this will list your DotNetNuke websites that you have on your local IIS. The first one in that list will be selected by default.&lt;/p&gt;

&lt;p&gt;You may also notice there a new Debugger selected in that screenshot called &amp;ldquo;Local Dnn Website&amp;rdquo;. That&amp;rsquo;s my own custom debugger that&amp;rsquo;s available only for this project type.&lt;/p&gt;

&lt;p&gt;All you need to do is click &amp;ldquo;Play&amp;rdquo; and it will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build your project to output the deployment zip.&lt;/li&gt;
&lt;li&gt;Deploy your install zip to the Dnn website selected in the dropdown.&lt;/li&gt;
&lt;li&gt;Attach the debugger to Dnn website&amp;rsquo;s worker process that is selected in the dropwdown.&lt;/li&gt;
&lt;li&gt;Launch a new browser window, navigated to that dnn websites home page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Therefore, to use a different Dnn website as the host for running and debugging your module, you would just select that website in the drop down instead, before you click the &amp;ldquo;play&amp;rdquo; button.&lt;/p&gt;

&lt;p&gt;This is going to wayyyy better than previous workflows for Dnn development.&lt;/p&gt;

&lt;h3 id=&#34;what-now&#34;&gt;What Now?&lt;/h3&gt;

&lt;p&gt;Well.. I am pretty far into the development of this at the moment, which is why I have been able to include some screenshots. However it is a steep learning curve, and I am continuosly hitting hurdles with &lt;a href=&#34;https://github.com/Microsoft/VSProjectSystem&#34;&gt;Microsoft&amp;rsquo;s new Project System (CPS)&lt;/a&gt;. This is my first attempt at developing a VS project type and I don&amp;rsquo;t have any in roads with microsoft or any support. So all of this means, I am &amp;ldquo;hoping&amp;rdquo; I can pull this off, and the signs are promising, but I&amp;rsquo;m not through the woods yet. The (very) dark, mystical woods, of VS project type development.&lt;/p&gt;

&lt;p&gt;Still, I&amp;rsquo;d love to hear what others think of this - even though I appreciate it&amp;rsquo;s very premature. Would you use such a system? Any ideas for improvements? I&amp;rsquo;ll release a new blog post when things are looking a bit more finalised, and perhaps again when I have something for beta release.&lt;/p&gt;

&lt;p&gt;Lastly, if there are any guru&amp;rsquo;s out there who have expertise with &lt;a href=&#34;https://github.com/Microsoft/VSProjectSystem&#34;&gt;CPS&lt;/a&gt; - I can always use a hand ;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DnnPackager - Getting Started</title>
      <link>http://darrelltunnell.net/blog/2015/12/01/dnnpackager---getting-started/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2015/12/01/dnnpackager---getting-started/</guid>
      <description>&lt;h3 id=&#34;dnn-packager-super-smooth-module-development&#34;&gt;Dnn Packager - Super Smooth Module Development&lt;/h3&gt;

&lt;p&gt;In this post, I am going to show you how to get up and running with DnnPackager for your DotNetNuke module / extension development.&lt;/p&gt;

&lt;h3 id=&#34;tools-of-the-trade&#34;&gt;Tools of the Trade&lt;/h3&gt;

&lt;p&gt;I am using VS2015 Community Edition, but this should work equally well with previous versions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;installing-dotnetnuke-locally&#34;&gt;Installing DotNetNuke Locally&lt;/h3&gt;

&lt;p&gt;You will need a local instance of DotNetNuke website installed so that you have somewhere to deploy / run and debug your modules. There are plenty of tutorials out there that cover how to install a Dnn website so I am not going to cover this here. If you think this would be useful, leave a comment below and I might consider it! Once you have a working Dnn Website installed under your local IIS - please read on!&lt;/p&gt;

&lt;h3 id=&#34;create-a-project&#34;&gt;Create a Project&lt;/h3&gt;

&lt;p&gt;Open Visual Studio, and Create a New &amp;ldquo;ASP.NET Empty Web Application&amp;rdquo; project. Make sure you select &amp;ldquo;.NET 4&amp;rdquo; from the drop down at the top.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/NewAspNetProject.PNG&#34; alt=&#34;New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note: Create your project wherever you like - where you put your source code - that&amp;rsquo;s your business!&lt;/p&gt;

&lt;h3 id=&#34;tweak-web-project&#34;&gt;Tweak Web Project&lt;/h3&gt;

&lt;p&gt;The reason we choose to create a web project in the previous step, rather than say - a library project, is just so that we have appropriate context menu options in visual studio for doing things like adding javascript and ascx files etc. This is generally handy for Dnn module development. However our project can not actually run as a &amp;ldquo;standalone website&amp;rdquo; - as we are developing a Dnn module - which can only run within the context of the Dnn website that is hosting it. The approach described in this blog should work equally well if you prefer to create other types of projects - but then you might not have those familiar menu options available, so you may have to add things like javascript files to your project by hand.&lt;/p&gt;

&lt;p&gt;Select the project in Solution Explorer window, then in the properties window, change &amp;ldquo;Always Start When Debugging&amp;rdquo; to false.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/alwaysstartwhendebuggingfalse.PNG&#34; alt=&#34;alwaysstartwhendebuggingfalse.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This will help later as it will prevent Visual Studio from needlessly trying to host your module project as its own website whenever you try and debug your module - which will be running in your local Dnn website instead.&lt;/p&gt;

&lt;h3 id=&#34;add-dnnpackager-nuget-package&#34;&gt;Add DnnPackager NuGet Package&lt;/h3&gt;

&lt;p&gt;Open the Package Manager Console (Tools &amp;ndash;&amp;gt; NuGet Package Manager) and (With your project selected in the &amp;ldquo;Default Project&amp;rdquo; dropdown, type into it the following command and hit enter to install the DnnPackager NuGet package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Install-Package DnnPackager

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/NuGetConsoleAddDnnPackagerNuGet.PNG&#34; alt=&#34;NuGetConsoleAddDnnPackagerNuGet.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This will add some new items to your project, and to your solution. I will cover what these are for later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/ProjectAfterAddingDnnPackager.PNG&#34; alt=&#34;ProjectAfterAddingDnnPackager.PNG&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;dnn-sdk-assemblies&#34;&gt;Dnn Sdk Assemblies&lt;/h3&gt;

&lt;p&gt;In order to proceed with Dnn development, we will actually need to add references to the Dnn assemblies. Depending on the version of DotNetNuke you want your extension to be compatible with will often determine what version of the Dnn assemblies you will need to reference.&lt;/p&gt;

&lt;p&gt;For the sake of this blog post I am going to assume that you are going to target the latest version of Dnn (at the time of writing this is Dnn 7)&lt;/p&gt;

&lt;p&gt;Using the Package Manager Console again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Install-Package DotNetNuke.Core

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should add a reference to the DotNetNuke assembly to your project&amp;rsquo;s references:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/ReferencesAfterAddingDnnCore.PNG&#34; alt=&#34;ReferencesAfterAddingDnnCore.PNG&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;let-s-develop-a-module&#34;&gt;Let&amp;rsquo;s Develop a Module!&lt;/h3&gt;

&lt;p&gt;Now we have got most of the setup out of the way, it&amp;rsquo;s time to get cracking on our module!&lt;/p&gt;

&lt;p&gt;First add a new User Control to the project. This is going to be the default UI for our super cool DNN module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/AddUserControl.PNG&#34; alt=&#34;AddUserControl.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We then need to change our new User Control to make it inherit from &lt;code&gt;PortalModuleBase&lt;/code&gt; rather than &lt;code&gt;System.Web.UI.UserControl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So change this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;
namespace MySuperModule
{
    public partial class Default : System.Web.UI.UserControl
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using DotNetNuke.Entities.Modules;

namespace MySuperModule
{
    public partial class Default : PortalModuleBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** Don&amp;rsquo;t forget to add the &amp;lsquo;using&amp;rsquo; statement depicted above! **&lt;/p&gt;

&lt;h3 id=&#34;making-an-awesome-module&#34;&gt;Making an awesome module&lt;/h3&gt;

&lt;p&gt;Further development of this super awesome module is beyond the scope of this post, so I am just going to make it display something really simple for the time being. There are &lt;a href=&#34;http://www.dnnsoftware.com/community-blog/cid/141749/dotnetnuke-module-development-101-5--hello-world-3-using-visual-studio-to-create-a-module&#34;&gt;plenty of other resources&lt;/a&gt; out there for learning about Dnn module development. For now let&amp;rsquo;s  make it display some text.&lt;/p&gt;

&lt;p&gt;Add the following h1 content to your markup for the user control:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;%@ Control Language=&amp;quot;C#&amp;quot; AutoEventWireup=&amp;quot;true&amp;quot; CodeBehind=&amp;quot;Default.ascx.cs&amp;quot; Inherits=&amp;quot;MySuperModule.Default&amp;quot; %&amp;gt;

&amp;lt;h1&amp;gt;I came, I read a blog, I conquered!&amp;lt;/h1&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;module-manifest&#34;&gt;Module Manifest&lt;/h3&gt;

&lt;p&gt;Now that we have this incredible&amp;hellip; work of art, naturally we want to run it and test it out. In order to do this though, we first need to make sure our module is going to identify itself with DotNetNuke correctly. This means it should have a manifest.&lt;/p&gt;

&lt;p&gt;One of the files that was automatically added to your project when you added the DnnPackager NuGet package was: manifest.dnn&lt;/p&gt;

&lt;p&gt;Open up manifest.dnn and replace the values in square brackets with appropriate values. You only need to do this once.&lt;/p&gt;

&lt;p&gt;For example, you will see something that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;
&amp;lt;dotnetnuke type=&amp;quot;Package&amp;quot; version=&amp;quot;6.0&amp;quot;&amp;gt;
  &amp;lt;packages&amp;gt;    
    &amp;lt;package name=&amp;quot;[YourPackageName]&amp;quot; type=&amp;quot;Module&amp;quot; version=&amp;quot;0.0.0&amp;quot;&amp;gt;
      &amp;lt;friendlyName&amp;gt;[FriendlyPackageName]&amp;lt;/friendlyName&amp;gt;
      &amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;
      &amp;lt;owner&amp;gt;
        &amp;lt;name&amp;gt;[OwnerName]&amp;lt;/name&amp;gt;
        &amp;lt;organization&amp;gt;[OrganizationName]&amp;lt;/organization&amp;gt;
        &amp;lt;url&amp;gt;http://www.someurl.com&amp;lt;/url&amp;gt;
        &amp;lt;email&amp;gt;&amp;lt;![CDATA[&amp;lt;a href=&amp;quot;mailto:support@someorg.com&amp;quot;&amp;gt;support@someorg.com&amp;lt;/a&amp;gt;]]&amp;gt;&amp;lt;/email&amp;gt;
      &amp;lt;/owner&amp;gt;
      &amp;lt;license src=&amp;quot;License.lic&amp;quot;&amp;gt;
      &amp;lt;/license&amp;gt;
      &amp;lt;releaseNotes src=&amp;quot;ReleaseNotes.txt&amp;quot;&amp;gt;
      &amp;lt;/releaseNotes&amp;gt;
      &amp;lt;dependencies&amp;gt;      
      &amp;lt;/dependencies&amp;gt;
      &amp;lt;components&amp;gt;
        &amp;lt;component type=&amp;quot;Module&amp;quot;&amp;gt;
          &amp;lt;desktopModule&amp;gt;
            &amp;lt;moduleName&amp;gt;[YourModuleName]&amp;lt;/moduleName&amp;gt;
            &amp;lt;foldername&amp;gt;[FolderName]&amp;lt;/foldername&amp;gt;
            &amp;lt;businessControllerClass /&amp;gt;
            &amp;lt;supportedFeatures /&amp;gt;
            &amp;lt;moduleDefinitions&amp;gt;
              &amp;lt;moduleDefinition&amp;gt;
                &amp;lt;friendlyName&amp;gt;[Friendly Module Name]&amp;lt;/friendlyName&amp;gt;
                &amp;lt;defaultCacheTime&amp;gt;60&amp;lt;/defaultCacheTime&amp;gt;
                &amp;lt;moduleControls&amp;gt;
                  &amp;lt;moduleControl&amp;gt;
                    &amp;lt;controlKey&amp;gt;
                    &amp;lt;/controlKey&amp;gt;
                    &amp;lt;controlSrc&amp;gt;[YourControllerOrPathToView]/[YourViewFileName].[YourViewFileExtension]&amp;lt;/controlSrc&amp;gt;
                    &amp;lt;supportsPartialRendering&amp;gt;False&amp;lt;/supportsPartialRendering&amp;gt;
                    &amp;lt;controlTitle&amp;gt;[Default title when added to page]&amp;lt;/controlTitle&amp;gt;
                    &amp;lt;controlType&amp;gt;View&amp;lt;/controlType&amp;gt;
                    &amp;lt;helpUrl&amp;gt;
                    &amp;lt;/helpUrl&amp;gt;
                  &amp;lt;/moduleControl&amp;gt;
                  &amp;lt;moduleControl&amp;gt;
                    &amp;lt;controlKey&amp;gt;settings&amp;lt;/controlKey&amp;gt;
                    &amp;lt;controlSrc&amp;gt;[YourControllerOrPathToSettings]/[YourSettingsFileName].[YourSettingsFileExtension]&amp;lt;/controlSrc&amp;gt;
                    &amp;lt;supportsPartialRendering&amp;gt;False&amp;lt;/supportsPartialRendering&amp;gt;
                    &amp;lt;controlTitle&amp;gt;[Default settings title]&amp;lt;/controlTitle&amp;gt;
                    &amp;lt;controlType&amp;gt;View&amp;lt;/controlType&amp;gt;
                    &amp;lt;helpUrl&amp;gt;
                    &amp;lt;/helpUrl&amp;gt;
                  &amp;lt;/moduleControl&amp;gt;
                &amp;lt;/moduleControls&amp;gt;
                &amp;lt;permissions&amp;gt;
                &amp;lt;/permissions&amp;gt;
              &amp;lt;/moduleDefinition&amp;gt;
            &amp;lt;/moduleDefinitions&amp;gt;
          &amp;lt;/desktopModule&amp;gt;
        &amp;lt;/component&amp;gt;
        &amp;lt;component type=&amp;quot;Assembly&amp;quot;&amp;gt;
          &amp;lt;assemblies&amp;gt;
            &amp;lt;assembly&amp;gt;
              &amp;lt;path&amp;gt;bin&amp;lt;/path&amp;gt;
              &amp;lt;name&amp;gt;[YourAssembly.dll]&amp;lt;/name&amp;gt;
            &amp;lt;/assembly&amp;gt;
          &amp;lt;/assemblies&amp;gt;
        &amp;lt;/component&amp;gt;
        &amp;lt;component type=&amp;quot;ResourceFile&amp;quot;&amp;gt;
          &amp;lt;resourceFiles&amp;gt;
            &amp;lt;basePath&amp;gt;DesktopModules/[FolderName]&amp;lt;/basePath&amp;gt;
            &amp;lt;resourceFile&amp;gt;
              &amp;lt;name&amp;gt;Resources.zip&amp;lt;/name&amp;gt;
            &amp;lt;/resourceFile&amp;gt;
          &amp;lt;/resourceFiles&amp;gt;
        &amp;lt;/component&amp;gt;
      &amp;lt;/components&amp;gt;
    &amp;lt;/package&amp;gt;   
  &amp;lt;/packages&amp;gt;
&amp;lt;/dotnetnuke&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fill it in so it looks more like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;
&amp;lt;dotnetnuke type=&amp;quot;Package&amp;quot; version=&amp;quot;6.0&amp;quot;&amp;gt;
  &amp;lt;packages&amp;gt;    
    &amp;lt;package name=&amp;quot;MySuperModule&amp;quot; type=&amp;quot;Module&amp;quot; version=&amp;quot;0.0.1&amp;quot;&amp;gt;
      &amp;lt;friendlyName&amp;gt;MySuperModule&amp;lt;/friendlyName&amp;gt;
      &amp;lt;description&amp;gt;Makes the internet work&amp;lt;/description&amp;gt;
      &amp;lt;owner&amp;gt;
        &amp;lt;name&amp;gt;Darrell Tunnell&amp;lt;/name&amp;gt;
        &amp;lt;organization&amp;gt;Dazinator&amp;lt;/organization&amp;gt;
        &amp;lt;url&amp;gt;http://darrelltunnell.net&amp;lt;/url&amp;gt;
        &amp;lt;email&amp;gt;&amp;lt;![CDATA[&amp;lt;a href=&amp;quot;mailto:support@someorg.com&amp;quot;&amp;gt;support@someorg.com&amp;lt;/a&amp;gt;]]&amp;gt;&amp;lt;/email&amp;gt;
      &amp;lt;/owner&amp;gt;
      &amp;lt;license src=&amp;quot;License.lic&amp;quot;&amp;gt;
      &amp;lt;/license&amp;gt;
      &amp;lt;releaseNotes src=&amp;quot;ReleaseNotes.txt&amp;quot;&amp;gt;
      &amp;lt;/releaseNotes&amp;gt;
      &amp;lt;dependencies&amp;gt;      
      &amp;lt;/dependencies&amp;gt;
      &amp;lt;components&amp;gt;
        &amp;lt;component type=&amp;quot;Module&amp;quot;&amp;gt;
          &amp;lt;desktopModule&amp;gt;
            &amp;lt;moduleName&amp;gt;MySuperModule&amp;lt;/moduleName&amp;gt;
            &amp;lt;foldername&amp;gt;MySuperModule&amp;lt;/foldername&amp;gt;
            &amp;lt;businessControllerClass /&amp;gt;
            &amp;lt;supportedFeatures /&amp;gt;
            &amp;lt;moduleDefinitions&amp;gt;
              &amp;lt;moduleDefinition&amp;gt;
                &amp;lt;friendlyName&amp;gt;MySuperModule&amp;lt;/friendlyName&amp;gt;
                &amp;lt;defaultCacheTime&amp;gt;-1&amp;lt;/defaultCacheTime&amp;gt;
                &amp;lt;moduleControls&amp;gt;
                  &amp;lt;moduleControl&amp;gt;
                    &amp;lt;controlKey&amp;gt;
                    &amp;lt;/controlKey&amp;gt;
                    &amp;lt;controlSrc&amp;gt;DesktopModules/MySuperModule/Default.ascx&amp;lt;/controlSrc&amp;gt;
                    &amp;lt;supportsPartialRendering&amp;gt;False&amp;lt;/supportsPartialRendering&amp;gt;
                    &amp;lt;controlTitle&amp;gt;Hello&amp;lt;/controlTitle&amp;gt;
                    &amp;lt;controlType&amp;gt;View&amp;lt;/controlType&amp;gt;
                    &amp;lt;helpUrl&amp;gt;
                    &amp;lt;/helpUrl&amp;gt;
                  &amp;lt;/moduleControl&amp;gt;                 
                &amp;lt;/moduleControls&amp;gt;
                &amp;lt;permissions&amp;gt;
                &amp;lt;/permissions&amp;gt;
              &amp;lt;/moduleDefinition&amp;gt;
            &amp;lt;/moduleDefinitions&amp;gt;
          &amp;lt;/desktopModule&amp;gt;
        &amp;lt;/component&amp;gt;
        &amp;lt;component type=&amp;quot;Assembly&amp;quot;&amp;gt;
          &amp;lt;assemblies&amp;gt;
            &amp;lt;assembly&amp;gt;
              &amp;lt;path&amp;gt;bin&amp;lt;/path&amp;gt;
              &amp;lt;name&amp;gt;MySuperModule.dll&amp;lt;/name&amp;gt;
            &amp;lt;/assembly&amp;gt;
          &amp;lt;/assemblies&amp;gt;
        &amp;lt;/component&amp;gt;
        &amp;lt;component type=&amp;quot;ResourceFile&amp;quot;&amp;gt;
          &amp;lt;resourceFiles&amp;gt;
            &amp;lt;basePath&amp;gt;DesktopModules/MySuperModule&amp;lt;/basePath&amp;gt;
            &amp;lt;resourceFile&amp;gt;
              &amp;lt;name&amp;gt;Resources.zip&amp;lt;/name&amp;gt;
            &amp;lt;/resourceFile&amp;gt;
          &amp;lt;/resourceFiles&amp;gt;
        &amp;lt;/component&amp;gt;
      &amp;lt;/components&amp;gt;
    &amp;lt;/package&amp;gt;   
  &amp;lt;/packages&amp;gt;
&amp;lt;/dotnetnuke&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: I removed the entry for the &amp;ldquo;settings&amp;rdquo; for our module as we don&amp;rsquo;t have a settings screen in this example. I also changed the default cache time to -1, which disables caching.. just because I have a feeling this module is going to one day become a lot more dynamic and I don&amp;rsquo;t want outdated content causing confusion :-)&lt;/p&gt;

&lt;p&gt;Important: I also set the version number to 0.0.1. Version numbers are important in that Dnn will not let you install an older version of a module over the top of a newer version. The version number in the manifest would have to be equal to, or greater than the currently installed version for it to install over the top.&lt;/p&gt;

&lt;h3 id=&#34;ready-to-roll&#34;&gt;Ready to roll&lt;/h3&gt;

&lt;p&gt;Sense that tension in the air? The excitement is building.. The entire blog post has been leading to this one, perfect, moment.&lt;/p&gt;

&lt;p&gt;We are now going to deploy our module to our local Dnn website, and debug it.&lt;/p&gt;

&lt;h3 id=&#34;automating-deployment&#34;&gt;Automating Deployment&lt;/h3&gt;

&lt;p&gt;In VS, go to the &amp;ldquo;Package Manager Console&amp;rdquo; window, and make sure your project is selected from the projects dropdown.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type: &lt;code&gt;Install-Module [name of your website in IIS]&lt;/code&gt; and hit enter.&lt;/li&gt;
&lt;li&gt;Watch as your module project is built, packaged up as a zip, and then the zip is deployed to your local Dnn website!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, on my IIS, the name of my Dnn website is &amp;ldquo;DotNetNuke&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/IISDnnWebsite.PNG&#34; alt=&#34;IISDnnWebsite.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So I type into the Package Manager Console &lt;code&gt;Install-Module DotNetNuke&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;After that completes, you can Login to your DotNetNuke website as host, and go to the Host&amp;ndash;&amp;gt;Extensions page, and you should see that your module is now listed as an installed extension! Pretty cool!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/hostextensionsmodules.PNG&#34; alt=&#34;hostextensionsmodules.PNG&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;setting-up-a-page-to-host-it&#34;&gt;Setting up a Page to Host it&lt;/h3&gt;

&lt;p&gt;Although our module has been installed onto our site, it won&amp;rsquo;t display anywhere - because we need to tell DotNetNuke where it should be displayed!&lt;/p&gt;

&lt;p&gt;This is a quick one time task, of simply creating a page in DotNetNuke to display our module.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login as Host&lt;/li&gt;
&lt;li&gt;Pages &amp;ndash;&amp;gt; Add New Page&lt;/li&gt;
&lt;li&gt;Fill out page details and create it.&lt;/li&gt;
&lt;li&gt;Modules &amp;ndash;&amp;gt; Add New Module&lt;/li&gt;
&lt;li&gt;Add your new module on to the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/AddedModule.PNG&#34; alt=&#34;AddedModule.PNG&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;debugging-it-testing-changes&#34;&gt;Debugging it &amp;amp; Testing Changes&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s make some changes. Add some more content:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;
&amp;lt;h1&amp;gt;I came, I read a blog, I conquered!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Everyday I&#39;m shuffling!&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add some code in your code behind, and set a breakpoint on it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/codebehindbreakpoint.PNG&#34; alt=&#34;codebehindbreakpoint.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now deploy this very simply by placing your cursor in the Package Manager Console window, and hitting &amp;ldquo;up&amp;rdquo; arrow on your keyboard. This will bring up the last command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Install-Module DotNetNuke

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hit enter.&lt;/p&gt;

&lt;p&gt;Once that completes, refresh the page displaying your module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/redeployedmodulewithchanges.PNG&#34; alt=&#34;redeployedmodulewithchanges.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Simples!&lt;/p&gt;

&lt;h3 id=&#34;but-wait-my-breakpoint-wasn-t-hit&#34;&gt;But wait - my breakpoint wasn&amp;rsquo;t hit!&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s because your module is being executed within the process running your DotNetNuke website. So what you need to do is &amp;ldquo;attach&amp;rdquo; the debugger to that process.&lt;/p&gt;

&lt;p&gt;You can do this manually, or you can let DnnPackager do it for you. To let DnnPackager handle this, go back to the package manager console, and amend that command you are using, by adding on a couple of arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Install-Module DotNetNuke Debug Attach

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So do that, and hit enter. You should see it deploy your module as before but this time it will also attach your debugger!&lt;/p&gt;

&lt;p&gt;So.. refresh your page.. and BAM! Breakpoint is hit!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/breakpointhit.PNG&#34; alt=&#34;breakpointhit.PNG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You need to be running Visual Studio as an Administrator before you can attach to the w3p process.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The full syntax of the command is (values in braces are optional):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Install-Module [name of your website in IIS] {Build Configuration} {Attach}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, if for some strange reason you&amp;rsquo;d prefer to attach to process in some other way, you absolutely can do that - no one is &amp;ldquo;forcing&amp;rdquo; you to use the above command. There are VS extensions you can get to make attaching to IIS processes trivial. Otherwise, within VS, a quick way to do it is do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hit ctrl + alt + p&lt;/li&gt;
&lt;li&gt;Tick show all processes (if it&amp;rsquo;s not allready)&lt;/li&gt;
&lt;li&gt;Select any process in the list, then hit &amp;ldquo;w&amp;rdquo; on your keyboard - this should scroll you to the &amp;ldquo;w3wp.exe&amp;rdquo; process.&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;attach&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://darrelltunnell.net/img/attachtoprocess.PNG&#34; alt=&#34;attachtoprocess.PNG&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-about-if-i-just-want-my-zip-file&#34;&gt;What about if I just want my Zip file&lt;/h3&gt;

&lt;p&gt;If you just want your installation zip for some reason, perhaps you want to upload it to the Dnn store etc, just build your project as normal and check in your projects output directory.&lt;/p&gt;

&lt;h3 id=&#34;issues&#34;&gt;Issues?&lt;/h3&gt;

&lt;p&gt;DnnPackager is open source on GitHub. Feel free to &lt;a href=&#34;https://github.com/dazinator/DnnPackager&#34;&gt;raise an issue&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;in-summary&#34;&gt;In Summary&lt;/h3&gt;

&lt;p&gt;DnnPackager is an automation tool that I built to help streamline the Dnn module develop workflow. Feel free to drop me a comment - does this tool help? Or have I missed my mark? Where could it be better? I&amp;rsquo;d love to hear suggestions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DotNetNuke - Streamlining Module Development Workflow</title>
      <link>http://darrelltunnell.net/blog/2015/06/13/dotnetnuke---streamlining-module-development-workflow/</link>
      <pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2015/06/13/dotnetnuke---streamlining-module-development-workflow/</guid>
      <description>&lt;h3 id=&#34;module-debugging-two-approaches&#34;&gt;Module Debugging - Two Approaches&lt;/h3&gt;

&lt;p&gt;When developing DotNetNuke modules people take many different approaches but they boil down to two alternatives in terms of workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Placing / checking out your source code directly into the \DesktopModules folder of a DotNetNuke website, and having your module dll&amp;rsquo;s output to directly into the DotNetNuke website&amp;rsquo;s \bin folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Checking out and working on your code wherever you like, but having to deploy your module (content and assemblies) to a local DNN website when you are ready to run it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both approaches require that you &amp;ldquo;attach to process&amp;rdquo; from within Visual Studio in order to debug your module.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;i-hate-approach-1&#34;&gt;I hate approach #1&lt;/h4&gt;

&lt;p&gt;I have all sorts of issues with approach #1. Yes it’s technically possible, but it’s also nasty in my view (not very clean) - I have elaborated on that elsewhere so won’t do so again here in depth, aside to say that I believe #2 is the &amp;ldquo;cleanest&amp;rdquo; approach and that many forms of debugging use #2 as the approach, not #1. For example, xamarin devs, when they debug an android app, you will see that xamarin actually deploys their project to the device / emulator, and then attaches the debugger to the remote process that&amp;rsquo;s running on the device / emulator. The result is that they click &amp;ldquo;Play&amp;rdquo; in VS, and a shortwhile later they are attached and stepping through their code.. It may not be obvious that a deployment took place - but it did. Lastly. i&amp;rsquo;ll point out that #1 creates a coupling between how you structure your source code, and where it needs to be when it&amp;rsquo;s actually deployed.&lt;/p&gt;

&lt;h4 id=&#34;but-approach-2-is-lacking&#34;&gt;But approach #2 is lacking&lt;/h4&gt;

&lt;p&gt;So deciding to take approach #2, having to manually copy / deploy your module content  to the DotNetNuke website each time you want to test your module, is just not an efficient use of your time!&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s needed is some nice visual studio integration so that when you are ready to &amp;ldquo;Run / Debug&amp;rdquo; your module, you click one button and bam! chrome opens up, displaying your module, with the debugger attached so you can step through code.&lt;/p&gt;

&lt;h4 id=&#34;can-anything-be-done&#34;&gt;Can anything be done?&lt;/h4&gt;

&lt;p&gt;I have allready made strides to address the inefficiences of #2 so that it&amp;rsquo;s now a lot more streamlined: &lt;a href=&#34;https://github.com/dazinator/DnnPackager&#34;&gt;https://github.com/dazinator/DnnPackager&lt;/a&gt; - it&amp;rsquo;s a NuGet package that you add to any VS project, and it will produce the Dnn module installation zip for you when you build the project. It then also extends the package manager console window in VS with an additional command you can run, that will deploy the module project to a local DNN website. So this is the workflow I currently use for module debugging:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a change to the code&lt;/li&gt;
&lt;li&gt;Hit “up” arrow and then hit “enter” in package manager console (this runs the previous command which is the DnnPackager one I spoke of, that builds and deploys my module project to my local dnn website)&lt;/li&gt;
&lt;li&gt;Refresh my browser page, and attach Visual Studio (ctrl + alt + p) to the w3w process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a bit more streamlined! This makes approach #2 workable in my opinion.&lt;/p&gt;

&lt;h4 id=&#34;room-for-improvements&#34;&gt;Room for Improvements!&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;What if I don’t have a DNN website already installed - for example I am new to Dnn development and just want to get up and running as quickly as possible.&lt;/li&gt;
&lt;li&gt;What if I am curious to know if my module runs in DNN 6.5.1 and I only have DNN7 installed?&lt;/li&gt;
&lt;li&gt;What if this is the first time I am testing this particular module - I have to make sure I go to DotNetNuke website, Create a page and add my module to that page right?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These things are all tedious. Most developers (new to DNN) expect to be able to click Debug and immediately be debugging their code - they don’t expect to have to jump through these additional hurdles / barriers.&lt;/p&gt;

&lt;p&gt;This is why DotNetNuke development can be a bit of a culture shock for many developers.&lt;/p&gt;

&lt;h4 id=&#34;next-feature&#34;&gt;Next Feature!&lt;/h4&gt;

&lt;p&gt;So the next feature I am thinking of adding to DnnPackager is one that addresses those concerns mentioned above. I’d be really greatful if anyone with such a curiousity wouldn&amp;rsquo;t mind reading it and offering their feedback on this proposed awesome feature &lt;a href=&#34;https://github.com/dazinator/DnnPackager/issues/14&#34;&gt;https://github.com/dazinator/DnnPackager/issues/14&lt;/a&gt; - just so I can get a feel for whether there is much demand for such a capability.&lt;/p&gt;

&lt;h4 id=&#34;feedback&#34;&gt;Feedback?&lt;/h4&gt;

&lt;p&gt;Do you disagree?
Would this new feature &lt;a href=&#34;https://github.com/dazinator/DnnPackager/issues/14&#34;&gt;https://github.com/dazinator/DnnPackager/issues/14&lt;/a&gt; help you?&lt;/p&gt;

&lt;p&gt;Darrell Tunnell
&lt;a href=&#34;http://darrelltunnell.net&#34;&gt;http://darrelltunnell.net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automating DotNetNuke deployments with Octopus Deploy</title>
      <link>http://darrelltunnell.net/blog/2015/04/29/automating-dotnetnuke-deployments-with-octopus-deploy/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://darrelltunnell.net/blog/2015/04/29/automating-dotnetnuke-deployments-with-octopus-deploy/</guid>
      <description>&lt;h3 id=&#34;automating-dotnetnuke-deployments-using-octopus-deploy&#34;&gt;Automating DotNetNuke Deployments using Octopus Deploy&lt;/h3&gt;

&lt;p&gt;Because I am an awesome dude, i&amp;rsquo;ll share with you how I automate dotnetnuke delivery / deployments. This works. It takes some effort to get this set up though, but it will be well worth it in the end.&lt;/p&gt;

&lt;p&gt;First i&amp;rsquo;ll explain the process for automating the deployment of the DotNetNuke website itself. Then I&amp;rsquo;ll explain how you can automate the deployment of modules / extensions on a continous basis.
&lt;/p&gt;

&lt;h3 id=&#34;preparation-work&#34;&gt;Preparation work&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Set up a brand new DotNetNuke website, and go through the install wizard until you are greeted with an empty default dotnetnuke website.&lt;/li&gt;
&lt;li&gt;Stop the website. Create a NuGet package containing the website folder.&lt;/li&gt;
&lt;li&gt;Put that on your internal NuGet feed.&lt;/li&gt;
&lt;li&gt;Go to the dotnetnuke database, and generate the create scripts (with data).&lt;/li&gt;
&lt;li&gt;Create a new console application that uses &lt;a href=&#34;http://dbup.github.io/&#34;&gt;dbup&lt;/a&gt; to run the above sql scripts when it is executed (as described &lt;a href=&#34;http://dbup.github.io/&#34;&gt;here&lt;/a&gt;). Remember to replace things like server name etc in the sql scripts with appropriate $variablename$. Dbup can substitute $variablename$ in the sql scripts with their actual values (which you can pass through from Octopus) before it executes them.&lt;/li&gt;
&lt;li&gt;Add &lt;a href=&#34;http://docs.octopusdeploy.com/display/OD/Using+OctoPack&#34;&gt;OctoPack&lt;/a&gt; to your Console Application so that it is packaged up into a NuGet package. Put this NuGet package on your internal NuGet feed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now be in this position:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a NuGet package on your feed containing the DotNetNuke website content&lt;/li&gt;
&lt;li&gt;You have a NuGet package on your feed containing your wonderful console application (DbUp) which will run the database scripts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next Step - to Octopus!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a project in Octopus to deploy a &amp;ldquo;DotNetNuke&amp;rdquo; website. For the deployment process you will need the NuGet packages prepared previously. The deployment process should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a website in IIS using the website NuGet package.&lt;/li&gt;
&lt;li&gt;Create the database by executing the executable within the Database NuGet package.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are lot&amp;rsquo;s of things to remember when deploying dotnetnuke. I won&amp;rsquo;t go into detail but things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Granting full permission to the app pool identity that the website runs under to the website folder.&lt;/li&gt;
&lt;li&gt;Updating the portalalias table with appropriate access url.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip; and other things. The Dnn install process has been covered elsewhere so I won&amp;rsquo;t go into any further detail here.&lt;/p&gt;

&lt;h3 id=&#34;congratulations-partly&#34;&gt;Congratulations (partly)&lt;/h3&gt;

&lt;p&gt;You should now be in a postion where you can roll out a DotNetNuke website via Octopus.. BUT WHAT ABOUT THE MODULES I&amp;rsquo;M DEVELOPING!! - I hear you exclaim.&lt;/p&gt;

&lt;h3 id=&#34;automating-module-deployments&#34;&gt;Automating Module Deployments&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you build your module projects (via build server etc) you want them packaged as DotNetNuke install packages, inside a NuGet deployment package, which is then published to your NuGet feed. You can use &lt;a href=&#34;https://github.com/dazinator/DnnPackager&#34;&gt;DnnPackager&lt;/a&gt; for this (which is something I created).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You&amp;rsquo;d need something that can copy a set of zip files to the &amp;ldquo;Install/Module&amp;rdquo; folder of a DotNetNuke website, and then monitor that folder, whilst calling the DotNetNuke url to install packages (www.dotnetnuke.com/install/install.aspx?mode=installresources). I wrote a quick console application to do this. It repeats calls to that URL all the time the number of zips in the install folder decrements (dotnetnuke deletes them after they are installed). If after x calls, there are the same number of zips left in the directory, it assumes they cannot be installed and reports a failure (return code).
You should package this tool up into a NuGet package and, you guessed it, stick it on your internal feed.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.Create a project in Octopus for &amp;ldquo;Module&amp;rdquo; deployment. You want the deployment process to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dowload the NuGet package containing your module zips.&lt;/li&gt;
&lt;li&gt;Download the NuGet package containing your module deployment utility (that console app i spoke of)&lt;/li&gt;
&lt;li&gt;Invoke your deployment tool exe, passing in arguments for where the module zip files were placed, what the website url is, and potentially the path to the Install/Modules folder on disk (although my own tool interrogated IIS based on the website URL to find the website directory)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## Full Congratulations&lt;/p&gt;

&lt;p&gt;You will now find that you can create a release of your module project in Octopus and deploy all your lates modules to any DotNetNuke website at the push of a button.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>